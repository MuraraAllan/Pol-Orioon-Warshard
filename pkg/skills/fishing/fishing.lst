C:/pol2/scripts/include/startEqp.inc, Line 6
var unique_items_created := {};
0: decl global #0
1: array
2: :=
3: #
var starteqp_cfg;
4: decl global #1
5: #
var template;
6: decl global #2
7: #
var magicspawnchance := 0;
8: decl global #3
9: 0L
10: :=
11: #
var magicadjustment  := 0;
12: decl global #4
13: 0L
14: :=
15: #
var making_starting_equipment := 0;
16: decl global #5
17: 0L
18: :=
19: #
var thecritter;
20: decl global #6
21: #
C:\pol2\pkg\skills\fishing\fishing.src, Line 18
program use_fishpole(who, fishingpole)
include "include/eventID";
22: get arg 'who'
23: get arg 'fishingpole'
if(!can_access(who, fishingpole))
24: local #0
25: local #1
26: 0L
27: makelocal
28: jmp userfunc @331
29: if true goto 32
return;
30: ""
31: progend
EraseObjProperty(who, "IsMeditating");
32: local #0
33: "IsMeditating"
34: Func(2,24): EraseObjProperty
35: #
EraseObjProperty(who, "HealTimer");
36: local #0
37: "HealTimer"
38: Func(2,24): EraseObjProperty
39: #
if(fishingpole.movable == 0)
40: local #1
41: get member 'movable'
42: 0L
43: ==
44: if false goto 53
SendSysMessage(who, "You cannot use that.");
45: local #0
46: "You cannot use that."
47: 3L
48: 1000L
49: Func(2,21): SendSysMessage
50: #
return;
51: ""
52: progend
if(!ReserveItem(fishingpole))
53: local #1
54: Func(2,23): ReserveItem
55: if true goto 58
return;
56: ""
57: progend
if(! IsFishingPoleEquipped(who, fishingpole))
58: local #0
59: local #1
60: makelocal
61: jmp userfunc @832
62: if true goto 71
SendSysMessage(who, "Voce precisa de uma vara para pescar!");
63: local #0
64: "Voce precisa de uma vara para pescar!"
65: 3L
66: 1000L
67: Func(2,21): SendSysMessage
68: #
return;
69: ""
70: progend
var targetsquare := TargetCoordinates(who);
71: decl local #2
72: local #0
73: Func(2,25): TargetCoordinates
74: :=
75: #
if(!targetsquare)
76: local #2
77: if true goto 80
return;
78: ""
79: progend
var locinfo:= GetMapInfo( targetsquare.x, targetsquare.y );
80: decl local #3
81: local #2
82: get member 'x'
83: local #2
84: get member 'y'
85: Func(2,26): GetMapInfo
86: :=
87: #
if(IsValidTarget(who, targetsquare, locinfo))
88: local #0
89: local #2
90: local #3
91: makelocal
92: jmp userfunc @950
93: if false goto 327
PerformAction(who, 0x9);
94: local #0
95: 9L
96: Func(2,27): PerformAction
97: #
var newsplash := CreateItemAtLocation(targetsquare.x, targetsquare.y, targetsqu
98: decl local #0
99: local #2
100: get member 'x'
101: local #2
102: get member 'y'
103: local #2
104: get member 'z'
105: 13613L
106: 1L
107: Func(2,28): CreateItemAtLocation
108: :=
109: #
newsplash.movable := 0;
110: local #4
111: 0L
112: set member 'movable' #
PlaySoundEffect(who, 0x240);
113: local #0
114: 576L
115: Func(2,29): PlaySoundEffect
116: #
sleepms(400);
117: 400L
118: Func(4,3): sleepms
119: #
set_critical(1);
120: 1L
121: Func(4,0): set_critical
122: #
DestroyItem(newsplash);
123: local #4
124: Func(2,19): DestroyItem
125: #
set_critical(0);
126: 0L
127: Func(4,0): set_critical
128: #
newsplash := CreateItemAtLocation(targetsquare.x, targetsquare.y, targetsquare.
129: local #2
130: get member 'x'
131: local #2
132: get member 'y'
133: local #2
134: get member 'z'
135: 13614L
136: 1L
137: Func(2,28): CreateItemAtLocation
138: local4 := 
newsplash.movable := 0;
139: local #4
140: 0L
141: set member 'movable' #
sleepms(400);
142: 400L
143: Func(4,3): sleepms
144: #
set_critical(1);
145: 1L
146: Func(4,0): set_critical
147: #
DestroyItem(newsplash);
148: local #4
149: Func(2,19): DestroyItem
150: #
set_critical(0);
151: 0L
152: Func(4,0): set_critical
153: #
newsplash := CreateItemAtLocation(targetsquare.x, targetsquare.y, targetsquare.
154: local #2
155: get member 'x'
156: local #2
157: get member 'y'
158: local #2
159: get member 'z'
160: 13615L
161: 1L
162: Func(2,28): CreateItemAtLocation
163: local4 := 
newsplash.movable := 0;
164: local #4
165: 0L
166: set member 'movable' #
sleepms(400);
167: 400L
168: Func(4,3): sleepms
169: #
set_critical(1);
170: 1L
171: Func(4,0): set_critical
172: #
DestroyItem(newsplash);
173: local #4
174: Func(2,19): DestroyItem
175: #
set_critical(0);
176: 0L
177: Func(4,0): set_critical
178: #
newsplash := CreateItemAtLocation(targetsquare.x, targetsquare.y, targetsquare.
179: local #2
180: get member 'x'
181: local #2
182: get member 'y'
183: local #2
184: get member 'z'
185: 13616L
186: 1L
187: Func(2,28): CreateItemAtLocation
188: local4 := 
newsplash.movable := 0;
189: local #4
190: 0L
191: set member 'movable' #
sleepms(400);
192: 400L
193: Func(4,3): sleepms
194: #
set_critical(1);
195: 1L
196: Func(4,0): set_critical
197: #
DestroyItem(newsplash);
198: local #4
199: Func(2,19): DestroyItem
200: #
set_critical(0);
201: 0L
202: Func(4,0): set_critical
203: #
sleepms(1500);
204: 1500L
205: Func(4,3): sleepms
206: #
if(!isSOS(who, targetsquare))
207: local #0
208: local #2
209: makelocal
210: jmp userfunc @864
211: if true goto 326
var difficulty;
212: decl local #0
213: #
if(targetsquare.objtype)
214: local #2
215: get member 'objtype'
216: if false goto 227
difficulty := GetHarvestDifficulty("fish", targetsquare.x, targetsquare.y, targ
217: "fish"
218: local #2
219: get member 'x'
220: local #2
221: get member 'y'
222: local #2
223: get member 'objtype'
224: Func(2,30): GetHarvestDifficulty
225: local5 := 
226: goto236
difficulty := GetHarvestDifficulty("fish", targetsquare.x, targetsquare.y, loci
227: "fish"
228: local #2
229: get member 'x'
230: local #2
231: get member 'y'
232: local #3
233: get member 'landtile'
234: Func(2,30): GetHarvestDifficulty
235: local5 := 
if(difficulty == error)
236: local #5
237: error
238: ==
239: if false goto 248
SendSysMessage(who, "There doesn't seem to be any fish here");
240: local #0
241: "There doesn't seem to be any fish here"
242: 3L
243: 1000L
244: Func(2,21): SendSysMessage
245: #
return 0;
246: 0L
247: progend
var successrate := CheckSkill(who, SKILLID_FISHING, difficulty, 0);
248: decl local #1
249: local #0
250: 18L
251: local #5
252: 0L
253: Func(2,31): CheckSkill
254: :=
255: #
if(successrate > 0)
256: local #6
257: 0L
258: >
259: if false goto 308
var fishreturned := HarvestResource("fish", targetsquare.x, targetsquare.y, 1, 
260: decl local #0
261: "fish"
262: local #2
263: get member 'x'
264: local #2
265: get member 'y'
266: 1L
267: 1L
268: Func(2,32): HarvestResource
269: :=
270: #
if(!fishreturned)
271: local #7
272: if true goto 281
SendSysMessage(who, "Voce esta afastado do local!");
273: local #0
274: "Voce esta afastado do local!"
275: 3L
276: 1000L
277: Func(2,21): SendSysMessage
278: #
return 0;
279: 0L
280: progend
var catchtype := GetTheCatch(who);
281: decl local #1
282: local #0
283: makelocal
284: jmp userfunc @640
285: :=
286: #
if(CreateItemInContainer(who.backpack, catchtype, 1))
287: local #0
288: get member 'backpack'
289: local #8
290: 1L
291: Func(2,17): CreateItemInContainer
292: if false goto 306
CheckToolWear (who, fishingpole, SKILLID_FISHING);
293: local #0
294: local #1
295: 18L
296: makelocal
297: jmp userfunc @438
298: #
skillgain(who, difficulty * 10);
299: local #0
300: local #5
301: 10L
302: *
303: makelocal
304: jmp userfunc @1106
305: #
306: leave block(2)
307: goto325
if(RandomInt(100)< 1)
308: 100L
309: Func(5,0): RandomInt
310: 1L
311: <
312: if false goto 319
CriticalFailure(who, targetsquare);
313: local #0
314: local #2
315: makelocal
316: jmp userfunc @584
317: #
318: goto325
SendSysMessage(who, "Eles nao parecem estar mordendo hoje.");
319: local #0
320: "Eles nao parecem estar mordendo hoje."
321: 3L
322: 1000L
323: Func(2,21): SendSysMessage
324: #
325: leave block(2)
326: leave block(1)
return 1;
327: 1L
328: progend
329: leave block(4)
330: progend
C:/pol2/scripts/include/canAccess.inc, Line 2
function can_access(who, item, flags := 0)
331: pop param 'flags'
332: pop param 'item'
333: pop param 'who'
var owner := Cint(GetObjProperty(item, "Owner"));
334: decl local #3
335: local #1
336: "Owner"
337: Func(2,1): GetObjProperty
338: Func(0,0): CInt
339: :=
340: #
if((owner) and (owner != who.serial))
341: local #3
342: local #3
343: local #2
344: get member 'serial'
345: <>
346: &&
347: if false goto 357
SendSysMessage(who, "You cannot use that.");
348: local #2
349: "You cannot use that."
350: 3L
351: 1000L
352: Func(2,21): SendSysMessage
353: #
return 0;
354: 0L
355: return
356: goto436
elseif(GetObjProperty(item, "Vendored"))
357: local #1
358: "Vendored"
359: Func(2,1): GetObjProperty
360: if false goto 370
SendSysMessage(who, "You cannot use that.");
361: local #2
362: "You cannot use that."
363: 3L
364: 1000L
365: Func(2,21): SendSysMessage
366: #
return 0;
367: 0L
368: return
369: goto436
elseif(!Accessible(who, item))
370: local #2
371: local #1
372: Func(2,22): Accessible
373: if true goto 383
SendSysMessage(who, "You cannot use that.");
374: local #2
375: "You cannot use that."
376: 3L
377: 1000L
378: Func(2,21): SendSysMessage
379: #
return 0;
380: 0L
381: return
382: goto436
elseif((!flags["distance"]) and ((Distance(who, item) > 2)))
383: local #0
384: "distance"
385: [] 1
386: !
387: local #2
388: local #1
389: Func(2,15): Distance
390: 2L
391: >
392: &&
393: if false goto 403
SendSysMessage(who, "That item is too far away.");
394: local #2
395: "That item is too far away."
396: 3L
397: 1000L
398: Func(2,21): SendSysMessage
399: #
return 0;
400: 0L
401: return
402: goto436
elseif((!flags["unmovable"]) and (item.movable == 0))
403: local #0
404: "unmovable"
405: [] 1
406: !
407: local #1
408: get member 'movable'
409: 0L
410: ==
411: &&
412: if false goto 422
SendSysMessage(who, "You cannot use that while locked down.");
413: local #2
414: "You cannot use that while locked down."
415: 3L
416: 1000L
417: Func(2,21): SendSysMessage
418: #
return 0;
419: 0L
420: return
421: goto436
elseif(!ReserveItem(item))
422: local #1
423: Func(2,23): ReserveItem
424: if true goto 434
SendSysMessage(who, "That item is already in use.");
425: local #2
426: "That item is already in use."
427: 3L
428: 1000L
429: Func(2,21): SendSysMessage
430: #
return 0;
431: 0L
432: return
433: goto436
return 1;
434: 1L
435: return
436: 0L
437: return
C:/pol2/scripts/include/toolWear.inc, Line 1
function CheckToolWear (who, tool, skillid)
438: pop param 'skillid'
439: pop param 'tool'
440: pop param 'who'
var swings := GetObjProperty(tool,"swings");
441: decl local #3
442: local #1
443: "swings"
444: Func(2,1): GetObjProperty
445: :=
446: #
if(!swings)
447: local #3
448: if true goto 489
var mods := GetObjProperty(tool, "durability");
449: decl local #0
450: local #1
451: "durability"
452: Func(2,1): GetObjProperty
453: :=
454: #
var bonus := 0;
455: decl local #1
456: 0L
457: :=
458: #
case(mods)
459: local #4
460: casejmp
	"durable": @461
	"substantial": @464
	"massive": @467
	"fortified": @470
	"indestructable": @473
	default: @475
bonus := 10;
461: 10L
462: local5 := 
463: goto475
bonus := 20;
464: 20L
465: local5 := 
466: goto475
bonus := 30;
467: 30L
468: local5 := 
469: goto475
bonus := 40;
470: 40L
471: local5 := 
472: goto475
bonus := 50;
473: 50L
474: local5 := 
swings := Cint(50 * tool.quality) + bonus;
475: 50L
476: local #1
477: get member 'quality'
478: *
479: Func(0,0): CInt
480: local #5
481: +
482: local3 := 
SetObjProperty(tool,"swings", swings);
483: local #1
484: "swings"
485: local #3
486: Func(2,3): SetObjProperty
487: #
488: leave block(2)
if(swings <= 0)
489: local #3
490: 0L
491: <=
492: if false goto 503
DestroyItem(tool);
493: local #1
494: Func(2,19): DestroyItem
495: #
SendSysMessage(who,"your tool broke.");
496: local #2
497: "your tool broke."
498: 3L
499: 1000L
500: Func(2,21): SendSysMessage
501: #
502: goto582
var skill := GetEffectiveSkill(who, skillid);
503: decl local #0
504: local #2
505: local #0
506: makelocal
507: jmp userfunc @632
508: :=
509: #
if(skill > 80)
510: local #4
511: 80L
512: >
513: if false goto 517
skill := 80;
514: 80L
515: local4 := 
516: goto523
elseif(skill < 20)
517: local #4
518: 20L
519: <
520: if false goto 523
skill := 20;
521: 20L
522: local4 := 
if((RandomInt(100)+1) > skill)
523: 100L
524: Func(5,0): RandomInt
525: 1L
526: +
527: local #4
528: >
529: if false goto 581
if(tool.isa(POLCLASS_WEAPON))
530: local #1
531: 16L
532: Call Method isa (1 params)
533: if false goto 574
if(tool.hp > 1)
534: local #1
535: get member 'hp'
536: 1L
537: >
538: if false goto 553
SetObjProperty(tool,"swings", (swings - 1));
539: local #1
540: "swings"
541: local #3
542: 1L
543: -
544: Func(2,3): SetObjProperty
545: #
tool.hp := tool.hp - 1;
546: local #1
547: local #1
548: get member 'hp'
549: 1L
550: -
551: set member 'hp' #
552: goto573
elseif((tool.hp > tool.maxhp) or (tool.hp == 1))
553: local #1
554: get member 'hp'
555: local #1
556: get member 'maxhp'
557: >
558: local #1
559: get member 'hp'
560: 1L
561: ==
562: ||
563: if false goto 573
SendSysMessage(who,"your tool broke.");
564: local #2
565: "your tool broke."
566: 3L
567: 1000L
568: Func(2,21): SendSysMessage
569: #
DestroyItem(tool);
570: local #1
571: Func(2,19): DestroyItem
572: #
573: goto581
SetObjProperty(tool,"swings", (swings - 1));
574: local #1
575: "swings"
576: local #3
577: 1L
578: -
579: Func(2,3): SetObjProperty
580: #
581: leave block(1)
582: 0L
583: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 216
function CriticalFailure(who, targetsquare)
584: pop param 'targetsquare'
585: pop param 'who'
var tnum := RandomInt(4);
586: decl local #2
587: 4L
588: Func(5,0): RandomInt
589: :=
590: #
var it := CreateNpcFromTemplate("seaserpent", targetsquare.x, targetsquare.y, t
591: decl local #3
592: "seaserpent"
593: local #0
594: get member 'x'
595: local #0
596: get member 'y'
597: local #0
598: get member 'z'
599: 0L
600: Func(2,35): CreateNpcFromTemplate
601: :=
602: #
if(it)
603: local #3
604: if false goto 630
SendSysMessage(who, "Ops, Algo estranho mordeu a isca!");
605: local #1
606: "Ops, Algo estranho mordeu a isca!"
607: 3L
608: 1000L
609: Func(2,21): SendSysMessage
610: #
var ev := {};
611: decl local #0
612: array
613: :=
614: #
ev.+type := EVID_ENGAGED;
615: local #4
616: "type"
617: .+
618: 2L
619: := #
ev.+source := who;
620: local #4
621: "source"
622: .+
623: local #1
624: := #
SendEvent(it, ev);
625: local #3
626: local #4
627: Func(2,4): SendEvent
628: #
629: leave block(1)
630: 0L
631: return
C:/pol2/scripts/include/attributes.inc, Line 431
function GetEffectiveSkill(who, skillid)
632: pop param 'skillid'
633: pop param 'who'
return GetAttribute(who, GetAttributeIdBySkillId(skillid));
634: local #1
635: local #0
636: makelocal
637: jmp userfunc @1193
638: Func(2,7): GetAttribute
639: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 171
function GetTheCatch(who)
640: pop param 'who'
var itemcfg := ReadConfigFile(":*:itemdesc");
641: decl local #1
642: ":*:itemdesc"
643: Func(3,0): ReadConfigFile
644: :=
645: #
var fishtype;
646: decl local #2
647: #
var currentskill := GetEffectiveSkill(who, SKILLID_FISHING);
648: decl local #3
649: local #0
650: 18L
651: makelocal
652: jmp userfunc @632
653: :=
654: #
var thisone := RandomInt(100)+ 1;
655: decl local #4
656: 100L
657: Func(5,0): RandomInt
658: 1L
659: +
660: :=
661: #
if(thisone <= 94)
662: local #4
663: 94L
664: <=
665: if false goto 678
fishtype := RandomInt(UOBJ_FISH_END - UOBJ_FISH_START)+ UOBJ_FISH_START;
666: 3L
667: Func(5,0): RandomInt
668: 2508L
669: +
670: local2 := 
SendSysMessage(who, "Voce pesco um peixe agradavel!");
671: local #0
672: "Voce pesco um peixe agradavel!"
673: 3L
674: 1000L
675: Func(2,21): SendSysMessage
676: #
677: goto830
elseif(thisone <= 97)
678: local #4
679: 97L
680: <=
681: if false goto 726
if(RandomInt(currentskill) >= 50)
682: local #3
683: Func(5,0): RandomInt
684: 50L
685: >=
686: if false goto 714
var bootarray := array(0x170b, 0x1711, 0x170f, 0x170d);
687: decl local #0
688: array
689: 5899L
690: +=
691: 5905L
692: +=
693: 5903L
694: +=
695: 5901L
696: +=
697: :=
698: #
fishtype := bootarray[RandomInt(4)+ 1];
699: local #5
700: 4L
701: Func(5,0): RandomInt
702: 1L
703: +
704: [] 1
705: local2 := 
SendSysMessage(who, "Voce pesco uns calcados!");
706: local #0
707: "Voce pesco uns calcados!"
708: 3L
709: 1000L
710: Func(2,21): SendSysMessage
711: #
712: leave block(1)
713: goto725
fishtype := RandomInt(UOBJ_FISH_END - UOBJ_FISH_START)+ UOBJ_FISH_START;
714: 3L
715: Func(5,0): RandomInt
716: 2508L
717: +
718: local2 := 
SendSysMessage(who, "Voce pesco um belo peixe!");
719: local #0
720: "Voce pesco um belo peixe!"
721: 3L
722: 1000L
723: Func(2,21): SendSysMessage
724: #
725: goto830
elseif(thisone <= 98)
726: local #4
727: 98L
728: <=
729: if false goto 766
if(RandomInt(currentskill) >= 50)
730: local #3
731: Func(5,0): RandomInt
732: 50L
733: >=
734: if false goto 765
var bandage := CreateItemInBackpack(who,0x6316, 10);
735: decl local #0
736: local #0
737: 25366L
738: 10L
739: Func(2,34): CreateItemInBackpack
740: :=
741: #
var i;
742: decl local #1
743: #
for (i := 0x1f2d; i <= 0x1f6c; i := i + 1)
744: local #6
745: 7981L
746: :=
747: #
748: local #6
749: 8044L
750: <=
751: if false goto 764
CreateItemInContainer(bandage,  i, 1);
752: local #5
753: local #6
754: 1L
755: Func(2,17): CreateItemInContainer
756: #
757: local #6
758: local #6
759: 1L
760: +
761: :=
762: #
763: goto748
764: leave block(2)
765: goto830
elseif(thisone <= 99)
766: local #4
767: 99L
768: <=
769: if false goto 803
if(RandomInt(currentskill) >= 50)
770: local #3
771: Func(5,0): RandomInt
772: 50L
773: >=
774: if false goto 791
fishtype := "level" +(RandomInt(2)+ 1)+ "map";
775: "level"
776: 2L
777: Func(5,0): RandomInt
778: 1L
779: +
780: +
781: "map"
782: +
783: local2 := 
SendSysMessage(who, "Voce pego um mapa do tesouro!");
784: local #0
785: "Voce pego um mapa do tesouro!"
786: 3L
787: 1000L
788: Func(2,21): SendSysMessage
789: #
790: goto802
fishtype := RandomInt(UOBJ_FISH_END - UOBJ_FISH_START)+ UOBJ_FISH_START;
791: 3L
792: Func(5,0): RandomInt
793: 2508L
794: +
795: local2 := 
SendSysMessage(who, "Voce pesco um belo peixe!");
796: local #0
797: "Voce pesco um belo peixe!"
798: 3L
799: 1000L
800: Func(2,21): SendSysMessage
801: #
802: goto830
if(GetEffectiveSkill(who, SKILLID_FISHING) >= 95)
803: local #0
804: 18L
805: makelocal
806: jmp userfunc @632
807: 95L
808: >=
809: if false goto 819
fishtype := "sosbottle";
810: "sosbottle"
811: local2 := 
SendSysMessage(who, "Voce encontra uma menssagem em um frasco!");
812: local #0
813: "Voce encontra uma menssagem em um frasco!"
814: 3L
815: 1000L
816: Func(2,21): SendSysMessage
817: #
818: goto830
fishtype := RandomInt(UOBJ_FISH_END - UOBJ_FISH_START)+ UOBJ_FISH_START;
819: 3L
820: Func(5,0): RandomInt
821: 2508L
822: +
823: local2 := 
SendSysMessage(who, "Voce pesco um belo peixe!");
824: local #0
825: "Voce pesco um belo peixe!"
826: 3L
827: 1000L
828: Func(2,21): SendSysMessage
829: #
return fishtype;
830: local #2
831: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 228
function IsFishingPoleEquipped(who, fishingpole)
832: pop param 'fishingpole'
833: pop param 'who'
if((!Accessible(who, fishingpole)) || (Distance(who, fishingpole)> 1))
834: local #1
835: local #0
836: Func(2,22): Accessible
837: !
838: local #1
839: local #0
840: Func(2,15): Distance
841: 1L
842: >
843: ||
844: if false goto 847
return 0;
845: 0L
846: return
foreach item in ListEquippedItems(who)
847: local #1
848: Func(2,16): ListEquippedItems
849: initforeach @858
if(fishingpole.serial == item.serial)
850: local #0
851: get member 'serial'
852: local #2
853: get member 'serial'
854: ==
855: if false goto 858
return 1;
856: 1L
857: return
858: stepforeach @850
859: leave block(3)
return EquipItem(who, fishingpole);
860: local #1
861: local #0
862: Func(2,36): EquipItem
863: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 285
function isSOS(who, targetsquare)
864: pop param 'targetsquare'
865: pop param 'who'
var packitems;
866: decl local #2
867: #
packitems := EnumerateItemsInContainer(who.backpack);
868: local #1
869: get member 'backpack'
870: Func(2,37): EnumerateItemsInContainer
871: local2 := 
var i, sosx, sosy;
872: decl local #3
873: #
874: decl local #4
875: #
876: decl local #5
877: #
for(i := 1; i <= len(packitems); i := i + 1)
878: local #3
879: 1L
880: :=
881: #
882: local #3
883: local #2
884: Func(0,4): len
885: <=
886: if false goto 948
if((packitems[i].objtype == 0xa363))
887: local #2
888: local #3
889: [] 1
890: get member 'objtype'
891: 41827L
892: ==
893: if false goto 941
sosx := GetObjProperty(packitems[i], "tileX");
894: local #2
895: local #3
896: [] 1
897: "tileX"
898: Func(2,1): GetObjProperty
899: local4 := 
sosy := GetObjProperty(packitems[i], "tileY");
900: local #2
901: local #3
902: [] 1
903: "tileY"
904: Func(2,1): GetObjProperty
905: local5 := 
var xd, yd;
906: decl local #0
907: #
908: decl local #1
909: #
xd := Abs(targetsquare.x - sosx);
910: local #0
911: get member 'x'
912: local #4
913: -
914: Func(6,2): Abs
915: local6 := 
yd := Abs(targetsquare.y - sosy);
916: local #0
917: get member 'y'
918: local #5
919: -
920: Func(6,2): Abs
921: local7 := 
if((xd <= 6)&&(yd <= 6))
922: local #6
923: 6L
924: <=
925: local #7
926: 6L
927: <=
928: &&
929: if false goto 940
GetSOSTreasure(who, targetsquare, packitems[i]);
930: local #1
931: local #0
932: local #2
933: local #3
934: [] 1
935: makelocal
936: jmp userfunc @1355
937: #
return 1;
938: 1L
939: return
940: leave block(2)
941: local #3
942: local #3
943: 1L
944: +
945: :=
946: #
947: goto882
return 0;
948: 0L
949: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 156
function IsValidTarget(who, targetsquare, locinfo)
950: pop param 'locinfo'
951: pop param 'targetsquare'
952: pop param 'who'
var retval := 1;
953: decl local #3
954: 1L
955: :=
956: #
if(!IsWater(targetsquare, locinfo))
957: local #1
958: local #0
959: makelocal
960: jmp userfunc @1009
961: if true goto 971
SendSysMessage(who, "You can't fish there!");
962: local #2
963: "You can't fish there!"
964: 3L
965: 1000L
966: Func(2,21): SendSysMessage
967: #
retval := 0;
968: 0L
969: local3 := 
970: goto1007
elseif(!IsInRange(who, targetsquare.x, targetsquare.y, targetsquare.z))
971: local #2
972: local #1
973: get member 'x'
974: local #1
975: get member 'y'
976: local #1
977: get member 'z'
978: makelocal
979: jmp userfunc @1562
980: if true goto 990
SendSysMessage(who, "That is too far away");
981: local #2
982: "That is too far away"
983: 3L
984: 1000L
985: Func(2,21): SendSysMessage
986: #
retval := 0;
987: 0L
988: local3 := 
989: goto1007
elseif(!CheckLosAt(who, targetsquare.x, targetsquare.y, targetsquare.z))
990: local #2
991: local #1
992: get member 'x'
993: local #1
994: get member 'y'
995: local #1
996: get member 'z'
997: Func(2,33): CheckLosAt
998: if true goto 1007
SendSysMessage(who, "That location is not in your line of sight!");
999: local #2
1000: "That location is not in your line of sight!"
1001: 3L
1002: 1000L
1003: Func(2,21): SendSysMessage
1004: #
retval := 0;
1005: 0L
1006: local3 := 
return retval;
1007: local #3
1008: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 133
function IsWater(thistile, locinfo)
1009: pop param 'locinfo'
1010: pop param 'thistile'
if(thistile.objtype)
1011: local #1
1012: get member 'objtype'
1013: if false goto 1066
if((thistile.objtype >= 0x1797)&&(thistile.objtype <= 0x179c))
1014: local #1
1015: get member 'objtype'
1016: 6039L
1017: >=
1018: local #1
1019: get member 'objtype'
1020: 6044L
1021: <=
1022: &&
1023: if false goto 1027
return 1;
1024: 1L
1025: return
1026: goto1065
elseif((thistile.objtype >= 0x346e)&&(thistile.objtype <= 0x3485))
1027: local #1
1028: get member 'objtype'
1029: 13422L
1030: >=
1031: local #1
1032: get member 'objtype'
1033: 13445L
1034: <=
1035: &&
1036: if false goto 1040
return 1;
1037: 1L
1038: return
1039: goto1065
elseif((thistile.objtype >= 0x3490)&&(thistile.objtype <= 0x34ab))
1040: local #1
1041: get member 'objtype'
1042: 13456L
1043: >=
1044: local #1
1045: get member 'objtype'
1046: 13483L
1047: <=
1048: &&
1049: if false goto 1053
return 1;
1050: 1L
1051: return
1052: goto1065
elseif((thistile.objtype >= 0x34b5)&&(thistile.objtype <= 0x34d5))
1053: local #1
1054: get member 'objtype'
1055: 13493L
1056: >=
1057: local #1
1058: get member 'objtype'
1059: 13525L
1060: <=
1061: &&
1062: if false goto 1065
return 1;
1063: 1L
1064: return
1065: goto1104
if((locinfo.landtile >= 0x00a8)&&(locinfo.landtile <= 0x00ab))
1066: local #0
1067: get member 'landtile'
1068: 168L
1069: >=
1070: local #0
1071: get member 'landtile'
1072: 171L
1073: <=
1074: &&
1075: if false goto 1079
return 1;
1076: 1L
1077: return
1078: goto1104
elseif((locinfo.landtile >= 0x0136)&&(locinfo.landtile <= 0x0137))
1079: local #0
1080: get member 'landtile'
1081: 310L
1082: >=
1083: local #0
1084: get member 'landtile'
1085: 311L
1086: <=
1087: &&
1088: if false goto 1092
return 1;
1089: 1L
1090: return
1091: goto1104
elseif((locinfo.landtile >= 0x3ff0)&&(locinfo.landtile <= 0x3ff3))
1092: local #0
1093: get member 'landtile'
1094: 16368L
1095: >=
1096: local #0
1097: get member 'landtile'
1098: 16371L
1099: <=
1100: &&
1101: if false goto 1104
return 1;
1102: 1L
1103: return
return 0;
1104: 0L
1105: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 103
function skillgain(who, points)
1106: pop param 'points'
1107: pop param 'who'
var diff := points / 10;
1108: decl local #2
1109: local #0
1110: 10L
1111: /
1112: :=
1113: #
var skill := GetEffectiveSkill(who, SKILLID_FISHING);
1114: decl local #3
1115: local #1
1116: 18L
1117: makelocal
1118: jmp userfunc @632
1119: :=
1120: #
if(skill > (diff - 20))
1121: local #3
1122: local #2
1123: 20L
1124: -
1125: >
1126: if false goto 1173
if((skill - diff) <= 5)
1127: local #3
1128: local #2
1129: -
1130: 5L
1131: <=
1132: if false goto 1136
points := points;
1133: local #0
1134: local0 := 
1135: goto1173
elseif((skill - diff) <= 10)
1136: local #3
1137: local #2
1138: -
1139: 10L
1140: <=
1141: if false goto 1149
points := (points * 3) / 4;
1142: local #0
1143: 3L
1144: *
1145: 4L
1146: /
1147: local0 := 
1148: goto1173
elseif((skill - diff) <= 15)
1149: local #3
1150: local #2
1151: -
1152: 15L
1153: <=
1154: if false goto 1160
points := points / 2;
1155: local #0
1156: 2L
1157: /
1158: local0 := 
1159: goto1173
elseif((skill - diff) <= 15)
1160: local #3
1161: local #2
1162: -
1163: 15L
1164: <=
1165: if false goto 1171
points := points / 4;
1166: local #0
1167: 4L
1168: /
1169: local0 := 
1170: goto1173
points := 0;
1171: 0L
1172: local0 := 
AwardRawSkillPoints(who, SKILLID_FISHING, points);
1173: local #1
1174: 18L
1175: local #0
1176: makelocal
1177: jmp userfunc @1181
1178: #
1179: 0L
1180: return
C:/pol2/scripts/include/attributes.inc, Line 231
function AwardRawSkillPoints(who, skillid, rawpoints)
1181: pop param 'rawpoints'
1182: pop param 'skillid'
1183: pop param 'who'
return AwardRawAttributePoints(who, GetAttributeIdBySkillId(skillid), rawpoints
1184: local #2
1185: local #1
1186: makelocal
1187: jmp userfunc @1193
1188: local #0
1189: local #1
1190: makelocal
1191: jmp userfunc @1731
1192: return
C:/pol2/scripts/include/attributes.inc, Line 250
function GetAttributeIdBySkillId(skillid)
1193: pop param 'skillid'
case(skillid)
1194: local #0
1195: casejmp
	0: @1196
	1: @1199
	2: @1202
	3: @1205
	4: @1208
	5: @1211
	6: @1214
	7: @1217
	8: @1220
	9: @1223
	10: @1226
	11: @1229
	12: @1232
	13: @1235
	14: @1238
	15: @1241
	16: @1244
	17: @1247
	18: @1250
	19: @1253
	20: @1256
	21: @1259
	22: @1262
	23: @1265
	24: @1268
	25: @1271
	26: @1274
	27: @1277
	28: @1280
	29: @1283
	30: @1286
	31: @1289
	32: @1292
	33: @1295
	34: @1298
	35: @1301
	36: @1304
	37: @1307
	38: @1310
	39: @1313
	40: @1316
	41: @1319
	42: @1322
	43: @1325
	44: @1328
	45: @1331
	46: @1334
	47: @1337
	48: @1340
	default: @1342
return ATTRIBUTEID_ALCHEMY;
1196: "alchemy"
1197: return
1198: goto1342
return ATTRIBUTEID_ANATOMY;
1199: "anatomy"
1200: return
1201: goto1342
return ATTRIBUTEID_ANIMALLORE;
1202: "animallore"
1203: return
1204: goto1342
return ATTRIBUTEID_ITEMID;
1205: "itemid"
1206: return
1207: goto1342
return ATTRIBUTEID_ARMSLORE;
1208: "armslore"
1209: return
1210: goto1342
return ATTRIBUTEID_PARRY;
1211: "parry"
1212: return
1213: goto1342
return ATTRIBUTEID_BEGGING;
1214: "begging"
1215: return
1216: goto1342
return ATTRIBUTEID_BLACKSMITHY;
1217: "blacksmithy"
1218: return
1219: goto1342
return ATTRIBUTEID_BOWCRAFT;
1220: "bowcraft"
1221: return
1222: goto1342
return ATTRIBUTEID_PEACEMAKING;
1223: "peacemaking"
1224: return
1225: goto1342
return ATTRIBUTEID_CAMPING;
1226: "camping"
1227: return
1228: goto1342
return ATTRIBUTEID_CARPENTRY;
1229: "carpentry"
1230: return
1231: goto1342
return ATTRIBUTEID_CARTOGRAPHY;
1232: "cartography"
1233: return
1234: goto1342
return ATTRIBUTEID_COOKING;
1235: "cooking"
1236: return
1237: goto1342
return ATTRIBUTEID_DETECTINGHIDDEN;
1238: "detectinghidden"
1239: return
1240: goto1342
return ATTRIBUTEID_ENTICEMENT;
1241: "enticement"
1242: return
1243: goto1342
return ATTRIBUTEID_EVALINT;
1244: "evaluatingintelligence"
1245: return
1246: goto1342
return ATTRIBUTEID_HEALING;
1247: "healing"
1248: return
1249: goto1342
return ATTRIBUTEID_FISHING;
1250: "fishing"
1251: return
1252: goto1342
return ATTRIBUTEID_FORENSICS;
1253: "forensicevaluation"
1254: return
1255: goto1342
return ATTRIBUTEID_HERDING;
1256: "herding"
1257: return
1258: goto1342
return ATTRIBUTEID_HIDING;
1259: "hiding"
1260: return
1261: goto1342
return ATTRIBUTEID_PROVOCATION;
1262: "provocation"
1263: return
1264: goto1342
return ATTRIBUTEID_INSCRIPTION;
1265: "inscription"
1266: return
1267: goto1342
return ATTRIBUTEID_LOCKPICKING;
1268: "lockpicking"
1269: return
1270: goto1342
return ATTRIBUTEID_MAGERY;
1271: "magery"
1272: return
1273: goto1342
return ATTRIBUTEID_MAGICRESISTANCE;
1274: "magicresistance"
1275: return
1276: goto1342
return ATTRIBUTEID_TACTICS;
1277: "tactics"
1278: return
1279: goto1342
return ATTRIBUTEID_SNOOPING;
1280: "snooping"
1281: return
1282: goto1342
return ATTRIBUTEID_MUSICIANSHIP;
1283: "musicianship"
1284: return
1285: goto1342
return ATTRIBUTEID_POISONING;
1286: "poisoning"
1287: return
1288: goto1342
return ATTRIBUTEID_ARCHERY;
1289: "archery"
1290: return
1291: goto1342
return ATTRIBUTEID_SPIRITSPEAK;
1292: "spiritspeak"
1293: return
1294: goto1342
return ATTRIBUTEID_STEALING;
1295: "stealing"
1296: return
1297: goto1342
return ATTRIBUTEID_TAILORING;
1298: "tailoring"
1299: return
1300: goto1342
return ATTRIBUTEID_TAMING;
1301: "animaltaming"
1302: return
1303: goto1342
return ATTRIBUTEID_TASTEID;
1304: "tasteidentification"
1305: return
1306: goto1342
return ATTRIBUTEID_TINKERING;
1307: "tinkering"
1308: return
1309: goto1342
return ATTRIBUTEID_TRACKING;
1310: "tracking"
1311: return
1312: goto1342
return ATTRIBUTEID_VETERINARY;
1313: "veterinary"
1314: return
1315: goto1342
return ATTRIBUTEID_SWORDSMANSHIP;
1316: "swordsmanship"
1317: return
1318: goto1342
return ATTRIBUTEID_MACEFIGHTING;
1319: "macefighting"
1320: return
1321: goto1342
return ATTRIBUTEID_FENCING;
1322: "fencing"
1323: return
1324: goto1342
return ATTRIBUTEID_WRESTLING;
1325: "wrestling"
1326: return
1327: goto1342
return ATTRIBUTEID_LUMBERJACKING;
1328: "lumberjacking"
1329: return
1330: goto1342
return ATTRIBUTEID_MINING;
1331: "mining"
1332: return
1333: goto1342
return ATTRIBUTEID_MEDITATION;
1334: "meditation"
1335: return
1336: goto1342
return ATTRIBUTEID_STEALTH;
1337: "stealth"
1338: return
1339: goto1342
return ATTRIBUTEID_REMOVETRAP;
1340: "removetrap"
1341: return
var ret        := error;
1342: decl local #1
1343: error
1344: :=
1345: #
ret.+errortext := "No equivalent attributeid found for skillid " + skillid;
1346: local #1
1347: "errortext"
1348: .+
1349: "No equivalent attributeid found for skillid "
1350: local #0
1351: +
1352: := #
return ret;
1353: local #1
1354: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 240
function GetSOSTreasure(who, targetsquare, sosmsg)
1355: pop param 'sosmsg'
1356: pop param 'targetsquare'
1357: pop param 'who'
var spot;
1358: decl local #3
1359: #
if(CheckSkill(who, SKILLID_FISHING, 80, 200))
1360: local #2
1361: 18L
1362: 80L
1363: 200L
1364: Func(2,31): CheckSkill
1365: if false goto 1554
var itemcfg := ReadConfigFile(":*:itemdesc");
1366: decl local #0
1367: ":*:itemdesc"
1368: Func(3,0): ReadConfigFile
1369: :=
1370: #
var it, oldname;
1371: decl local #1
1372: #
1373: decl local #2
1374: #
if(RandomInt(100)< 75)
1375: 100L
1376: Func(5,0): RandomInt
1377: 75L
1378: <
1379: if false goto 1490
var newitem;
1380: decl local #0
1381: #
var artarray;
1382: decl local #1
1383: #
case(RandomInt(3))
1384: 3L
1385: Func(5,0): RandomInt
1386: casejmp
	0: @1387
	1: @1393
	2: @1417
	default: @1454
newitem := RandomInt(0x0fcc - 0x0fc4)+ 0x0fc4;
1387: 8L
1388: Func(5,0): RandomInt
1389: 4036L
1390: +
1391: local7 := 
1392: goto1454
artarray := array(0xea4, 0xea8, 0xea7, 0xe9f, 0xea0, 0xea3, 0xea6);
1393: array
1394: 3748L
1395: +=
1396: 3752L
1397: +=
1398: 3751L
1399: +=
1400: 3743L
1401: +=
1402: 3744L
1403: +=
1404: 3747L
1405: +=
1406: 3750L
1407: +=
1408: local8 := 
newitem := artarray[RandomInt(7) + 1];
1409: local #8
1410: 7L
1411: Func(5,0): RandomInt
1412: 1L
1413: +
1414: [] 1
1415: local7 := 
1416: goto1454
artarray := array(0x1397, 0x13a4, 0x13a5, 0x13a6, 0x13a7, 0x13a8, 0x13a9, 0x13a
1417: array
1418: 5015L
1419: +=
1420: 5028L
1421: +=
1422: 5029L
1423: +=
1424: 5030L
1425: +=
1426: 5031L
1427: +=
1428: 5032L
1429: +=
1430: 5033L
1431: +=
1432: 5035L
1433: +=
1434: 5036L
1435: +=
1436: 5037L
1437: +=
1438: 5038L
1439: +=
1440: 5690L
1441: +=
1442: 5691L
1443: +=
1444: 5692L
1445: +=
1446: local8 := 
newitem := artarray[RandomInt(14) + 1];
1447: local #8
1448: 14L
1449: Func(5,0): RandomInt
1450: 1L
1451: +
1452: [] 1
1453: local7 := 
it := CreateItemInBackpack(who, newitem, 1);
1454: local #2
1455: local #7
1456: 1L
1457: Func(2,34): CreateItemInBackpack
1458: local5 := 
oldname := it.name;
1459: local #5
1460: get member 'name'
1461: local6 := 
if((!oldname) || (oldname == ""))
1462: local #6
1463: !
1464: local #6
1465: ""
1466: ==
1467: ||
1468: if false goto 1474
oldname := itemcfg[newitem].desc;
1469: local #4
1470: local #7
1471: [] 1
1472: get member 'desc'
1473: local6 := 
it.name := oldname + " [Bau do Naufragio]";
1474: local #5
1475: local #6
1476: " [Bau do Naufragio]"
1477: +
1478: set member 'name' #
it.movable := 1;
1479: local #5
1480: 1L
1481: set member 'movable' #
SendSysMessage(who, "Voce pegou algo interessante!");
1482: local #2
1483: "Voce pegou algo interessante!"
1484: 3L
1485: 1000L
1486: Func(2,21): SendSysMessage
1487: #
1488: leave block(2)
1489: goto1552
SendSysMessage(who, "Voce pegou um tesouro!");
1490: local #2
1491: "Voce pegou um tesouro!"
1492: 3L
1493: 1000L
1494: Func(2,21): SendSysMessage
1495: #
var chest := CreateItemInBackpack(who, 0x9e40, 1);
1496: decl local #0
1497: local #2
1498: 40512L
1499: 1L
1500: Func(2,34): CreateItemInBackpack
1501: :=
1502: #
case(RandomInt(4) + 1)
1503: 4L
1504: Func(5,0): RandomInt
1505: 1L
1506: +
1507: casejmp
	1: @1508
	2: @1512
	3: @1516
	4: @1520
	default: @1523
chest.graphic := 0xe40;
1508: local #7
1509: 3648L
1510: set member 'graphic' #
1511: goto1523
chest.graphic := 0xe41;
1512: local #7
1513: 3649L
1514: set member 'graphic' #
1515: goto1523
chest.graphic := 0xe7c;
1516: local #7
1517: 3708L
1518: set member 'graphic' #
1519: goto1523
chest.graphic := 0x9ab;
1520: local #7
1521: 2475L
1522: set member 'graphic' #
chest.name := "Bau de Metal [Bau do Naufragio]";
1523: local #7
1524: "Bau de Metal [Bau do Naufragio]"
1525: set member 'name' #
chest.movable := 1;
1526: local #7
1527: 1L
1528: set member 'movable' #
MakeLoot(chest, RandomInt(2) + 5);
1529: local #7
1530: 2L
1531: Func(5,0): RandomInt
1532: 5L
1533: +
1534: makelocal
1535: jmp userfunc @1600
1536: #
DestroyItem(sosmsg);
1537: local #0
1538: Func(2,19): DestroyItem
1539: #
CreateItemInBackpack(who, 0x6328, 4);
1540: local #2
1541: 25384L
1542: 4L
1543: Func(2,34): CreateItemInBackpack
1544: #
SendSysMessage(who, "Voce extraiu um material colado no bau...",3,95);
1545: local #2
1546: "Voce extraiu um material colado no bau..."
1547: 3L
1548: 95L
1549: Func(2,21): SendSysMessage
1550: #
1551: leave block(1)
1552: leave block(3)
1553: goto1560
SendSysMessage(who, "Algo grande deslizo sobre sua isca!");
1554: local #2
1555: "Algo grande deslizo sobre sua isca!"
1556: 3L
1557: 1000L
1558: Func(2,21): SendSysMessage
1559: #
return 0;
1560: 0L
1561: return
C:\pol2\pkg\skills\fishing\fishing.src, Line 122
function IsInRange(who, x, y, z)
1562: pop param 'z'
1563: pop param 'y'
1564: pop param 'x'
1565: pop param 'who'
var xd, yd, zd;
1566: decl local #4
1567: #
1568: decl local #5
1569: #
1570: decl local #6
1571: #
var retval := 1;
1572: decl local #7
1573: 1L
1574: :=
1575: #
xd := Abs(who.x - x);
1576: local #3
1577: get member 'x'
1578: local #2
1579: -
1580: Func(6,2): Abs
1581: local4 := 
yd := Abs(who.y - y);
1582: local #3
1583: get member 'y'
1584: local #1
1585: -
1586: Func(6,2): Abs
1587: local5 := 
if((xd > 6)||(yd > 6))
1588: local #4
1589: 6L
1590: >
1591: local #5
1592: 6L
1593: >
1594: ||
1595: if false goto 1598
retval := 0;
1596: 0L
1597: local7 := 
return retval;
1598: local #7
1599: return
C:/pol2/scripts/include/startEqp.inc, Line 15
function MakeLoot(corpse, lootgroup)
1600: pop param 'lootgroup'
1601: pop param 'corpse'
var npcdesc := ReadConfigFile("::npcdesc");
1602: decl local #2
1603: "::npcdesc"
1604: Func(3,0): ReadConfigFile
1605: :=
1606: #
var elem := FindConfigElem(npcdesc, corpse.npctemplate);
1607: decl local #3
1608: local #2
1609: local #1
1610: get member 'npctemplate'
1611: Func(3,1): FindConfigElem
1612: :=
1613: #
var mprop, madj;
1614: decl local #4
1615: #
1616: decl local #5
1617: #
if(elem)
1618: local #3
1619: if false goto 1631
mprop := CInt(GetConfigInt(elem, "Magicitemchance"));
1620: local #3
1621: "Magicitemchance"
1622: Func(3,2): GetConfigInt
1623: Func(0,0): CInt
1624: local4 := 
madj  := CInt(GetConfigInt(elem, "MagicAdjustment"));
1625: local #3
1626: "MagicAdjustment"
1627: Func(3,2): GetConfigInt
1628: Func(0,0): CInt
1629: local5 := 
1630: goto1660
mprop := 1;
1631: 1L
1632: local4 := 
if(corpse.objtype == 0x9e40)
1633: local #1
1634: get member 'objtype'
1635: 40512L
1636: ==
1637: if false goto 1658
case(CInt(GetObjProperty(corpse,"level")))
1638: local #1
1639: "level"
1640: Func(2,1): GetObjProperty
1641: Func(0,0): CInt
1642: casejmp
	1: @1643
	2: @1646
	3: @1649
	4: @1652
	5: @1655
	default: @1657
madj := 0;
1643: 0L
1644: local5 := 
1645: goto1657
madj := 2;
1646: 2L
1647: local5 := 
1648: goto1657
madj := 4;
1649: 4L
1650: local5 := 
1651: goto1657
madj := 6;
1652: 6L
1653: local5 := 
1654: goto1657
madj := 8;
1655: 8L
1656: local5 := 
1657: goto1660
magicadjustment := 0;
1658: 0L
1659: global4 := 
if(GetHp(corpse))
1660: local #1
1661: makelocal
1662: jmp userfunc @2656
1663: if false goto 1677
foreach thing in ListEquippedItems(corpse)
1664: local #1
1665: Func(2,16): ListEquippedItems
1666: initforeach @1675
if(thing.objtype == 0xe75)
1667: local #6
1668: get member 'objtype'
1669: 3701L
1670: ==
1671: if false goto 1675
corpse := thing;
1672: local #6
1673: local1 := 
break;
1674: goto1676
1675: stepforeach @1667
1676: leave block(3)
thecritter := corpse;
1677: local #1
1678: global6 := 
if(mprop)
1679: local #4
1680: if false goto 1684
magicspawnchance := 1;
1681: 1L
1682: global3 := 
1683: goto1699
if((corpse.objtype == 0x9e40) || (corpse.objtype == 0xe40))
1684: local #1
1685: get member 'objtype'
1686: 40512L
1687: ==
1688: local #1
1689: get member 'objtype'
1690: 3648L
1691: ==
1692: ||
1693: if false goto 1697
magicspawnchance := 1;
1694: 1L
1695: global3 := 
1696: goto1699
magicspawnchance := 0;
1697: 0L
1698: global3 := 
magicadjustment  := madj;
1699: local #5
1700: global4 := 
starteqp_cfg := ReadConfigFile("::nlootgroup");
1701: "::nlootgroup"
1702: Func(3,0): ReadConfigFile
1703: global1 := 
if(lootgroup)
1704: local #0
1705: if false goto 1712
CreateFromGroup(corpse, lootgroup);
1706: local #1
1707: local #0
1708: makelocal
1709: jmp userfunc @1965
1710: #
1711: goto1729
var lootgroups := GetConfigStringArray(elem, "lootgroup");
1712: decl local #0
1713: local #3
1714: "lootgroup"
1715: Func(3,3): GetConfigStringArray
1716: :=
1717: #
foreach str in lootgroups
1718: local #6
1719: initforeach @1726
CreateFromGroup(corpse, CInt(str));
1720: local #1
1721: local #7
1722: Func(0,0): CInt
1723: makelocal
1724: jmp userfunc @1965
1725: #
1726: stepforeach @1720
1727: leave block(3)
1728: leave block(1)
1729: 0L
1730: return
C:/pol2/scripts/include/attributes.inc, Line 167
function AwardRawAttributePoints(who, attributeid, rawpoints, skillid)
1731: pop param 'skillid'
1732: pop param 'rawpoints'
1733: pop param 'attributeid'
1734: pop param 'who'
if(!who.isA(POLCLASS_MOBILE))
1735: local #3
1736: 3L
1737: Call Method isa (1 params)
1738: if true goto 1755
var ret := error;
1739: decl local #0
1740: error
1741: :=
1742: #
ret.+errortext := "Invalid parameter type: " + who + " isn't a mobileref.";
1743: local #4
1744: "errortext"
1745: .+
1746: "Invalid parameter type: "
1747: local #3
1748: +
1749: " isn't a mobileref."
1750: +
1751: := #
return ret;
1752: local #4
1753: return
1754: leave block(1)
rawpoints := Cdbl(rawpoints);
1755: local #1
1756: Func(0,2): CDbl
1757: local1 := 
if(rawpoints == error)
1758: local #1
1759: error
1760: ==
1761: if false goto 1765
return rawpoints;
1762: local #1
1763: return
1764: goto1771
elseif(rawpoints == 0.0)
1765: local #1
1766: 0LF
1767: ==
1768: if false goto 1771
return 1;
1769: 1L
1770: return
set_critical(1);
1771: 1L
1772: Func(4,0): set_critical
1773: #
var initial := GetAttributeBaseValue(who, attributeid);
1774: decl local #4
1775: local #3
1776: local #2
1777: Func(2,2): GetAttributeBaseValue
1778: :=
1779: #
var current := initial;
1780: decl local #5
1781: local #4
1782: :=
1783: #
if(rawpoints > 0)
1784: local #1
1785: 0L
1786: >
1787: if false goto 1823
var to_increase := GetNeededRawPointsToIncrease(current);
1788: decl local #0
1789: local #5
1790: makelocal
1791: jmp userfunc @2664
1792: :=
1793: #
while(rawpoints >= to_increase)
1794: local #1
1795: local #6
1796: >=
1797: if false goto 1811
rawpoints  := rawpoints - to_increase;
1798: local #1
1799: local #6
1800: -
1801: local1 := 
current    := current + 1;
1802: local #5
1803: 1L
1804: +
1805: local5 := 
to_increase := GetNeededRawPointsToIncrease(current);
1806: local #5
1807: makelocal
1808: jmp userfunc @2664
1809: local6 := 
1810: goto1794
if(RandomInt(Cint(to_increase)) < rawpoints)
1811: local #6
1812: Func(0,0): CInt
1813: Func(5,0): RandomInt
1814: local #1
1815: <
1816: if false goto 1821
current := current + 1;
1817: local #5
1818: 1L
1819: +
1820: local5 := 
1821: leave block(1)
1822: goto1869
elseif(rawpoints < 0)
1823: local #1
1824: 0L
1825: <
1826: if false goto 1869
var to_decrease  := GetNeededRawPointsToIncrease(current-1);
1827: decl local #0
1828: local #5
1829: 1L
1830: -
1831: makelocal
1832: jmp userfunc @2664
1833: :=
1834: #
while(rawpoints >= to_decrease && current > 0)
1835: local #1
1836: local #6
1837: >=
1838: local #5
1839: 0L
1840: >
1841: &&
1842: if false goto 1858
rawpoints  := rawpoints - to_decrease;
1843: local #1
1844: local #6
1845: -
1846: local1 := 
current    := current - 1;
1847: local #5
1848: 1L
1849: -
1850: local5 := 
to_decrease  := GetNeededRawPointsToIncrease(current-1);
1851: local #5
1852: 1L
1853: -
1854: makelocal
1855: jmp userfunc @2664
1856: local6 := 
1857: goto1835
if(RandomInt(Cint(to_decrease))< rawpoints)
1858: local #6
1859: Func(0,0): CInt
1860: Func(5,0): RandomInt
1861: local #1
1862: <
1863: if false goto 1868
current := current - 1;
1864: local #5
1865: 1L
1866: -
1867: local5 := 
1868: leave block(1)
if(current != initial)
1869: local #5
1870: local #4
1871: <>
1872: if false goto 1960
if(who.acctname)
1873: local #3
1874: get member 'acctname'
1875: if false goto 1951
if(current > CORE_SETTINGS_MAX_ATTRIBUTE)
1876: local #5
1877: 60000L
1878: >
1879: if false goto 1882
current := CORE_SETTINGS_MAX_ATTRIBUTE;
1880: 60000L
1881: local5 := 
var pid := getprocess(GetObjProperty(who, "cap_pid"));
1882: decl local #0
1883: local #3
1884: "cap_pid"
1885: Func(2,1): GetObjProperty
1886: Func(4,1): getprocess
1887: :=
1888: #
var k := struct;
1889: decl local #1
1890: struct
1891: :=
1892: #
if((attributeid == ATTRIBUTEID_STRENGTH) or (attributeid == ATTRIBUTEID_DEXTERI
1893: local #2
1894: "strength"
1895: ==
1896: local #2
1897: "dexterity"
1898: ==
1899: ||
1900: local #2
1901: "intelligence"
1902: ==
1903: ||
1904: if false goto 1930
k.+skid   := attributeid;
1905: local #7
1906: "skid"
1907: .+
1908: local #2
1909: := #
k.+skil   := skillid;
1910: local #7
1911: "skil"
1912: .+
1913: local #0
1914: := #
k.+type   := EVID_STATCAP;
1915: local #7
1916: "type"
1917: .+
1918: 4372L
1919: := #
k.+base   := current;
1920: local #7
1921: "base"
1922: .+
1923: local #5
1924: := #
pid.sendevent(k);
1925: local #6
1926: local #7
1927: Call Method sendevent (1 params)
1928: #
1929: goto1949
k.+skid   := attributeid;
1930: local #7
1931: "skid"
1932: .+
1933: local #2
1934: := #
k.+type   := EVID_SKILLCAP;
1935: local #7
1936: "type"
1937: .+
1938: 4371L
1939: := #
k.+base   := current;
1940: local #7
1941: "base"
1942: .+
1943: local #5
1944: := #
pid.sendevent(k);
1945: local #6
1946: local #7
1947: Call Method sendevent (1 params)
1948: #
1949: leave block(2)
1950: goto1956
SetAttributeBaseValue(who, attributeid, current);
1951: local #3
1952: local #2
1953: local #5
1954: Func(2,5): SetAttributeBaseValue
1955: #
DoRecalcVitals(who);
1956: local #3
1957: makelocal
1958: jmp userfunc @2634
1959: #
set_critical(0);
1960: 0L
1961: Func(4,0): set_critical
1962: #
return 1;
1963: 1L
1964: return
C:/pol2/scripts/include/startEqp.inc, Line 76
function CreateFromGroup(who, group)
1965: pop param 'group'
1966: pop param 'who'
if(making_starting_equipment != 1)
1967: global #5
1968: 1L
1969: <>
1970: if false goto 1974
starteqp_cfg := ReadConfigFile("::nlootgroup");
1971: "::nlootgroup"
1972: Func(3,0): ReadConfigFile
1973: global1 := 
var elem := starteqp_cfg[group];
1974: decl local #2
1975: global #1
1976: local #0
1977: [] 1
1978: :=
1979: #
foreach str in GetConfigStringArray(elem, "Stack")
1980: local #2
1981: "Stack"
1982: Func(3,3): GetConfigStringArray
1983: initforeach @1989
CreateFromStackString(who, str);
1984: local #1
1985: local #3
1986: makelocal
1987: jmp userfunc @2449
1988: #
1989: stepforeach @1984
1990: leave block(3)
foreach str in GetConfigStringArray(elem, "Item")
1991: local #2
1992: "Item"
1993: Func(3,3): GetConfigStringArray
1994: initforeach @2000
CreateFromItemString(who, str);
1995: local #1
1996: local #3
1997: makelocal
1998: jmp userfunc @2037
1999: #
2000: stepforeach @1995
2001: leave block(3)
foreach str in GetConfigStringArray(elem, "Random")
2002: local #2
2003: "Random"
2004: Func(3,3): GetConfigStringArray
2005: initforeach @2011
CreateFromRandomString(who, str);
2006: local #1
2007: local #3
2008: makelocal
2009: jmp userfunc @2313
2010: #
2011: stepforeach @2006
2012: leave block(3)
foreach str in GetConfigStringArray(elem, "Group")
2013: local #2
2014: "Group"
2015: Func(3,3): GetConfigStringArray
2016: initforeach @2022
CreateFromGroup(who, str);
2017: local #1
2018: local #3
2019: makelocal
2020: jmp userfunc @1965
2021: #
2022: stepforeach @2017
2023: leave block(3)
foreach str in GetConfigStringArray(elem, "Unique")
2024: local #2
2025: "Unique"
2026: Func(3,3): GetConfigStringArray
2027: initforeach @2033
CreateFromUniqueString(who, str);
2028: local #1
2029: local #3
2030: makelocal
2031: jmp userfunc @2573
2032: #
2033: stepforeach @2028
2034: leave block(3)
2035: 0L
2036: return
C:/pol2/scripts/include/startEqp.inc, Line 103
function CreateFromItemString(who, str)
2037: pop param 'str'
2038: pop param 'who'
var params := SplitWords(str);
2039: decl local #2
2040: local #0
2041: Func(0,1): SplitWords
2042: :=
2043: #
var count, objname, color, chance;
2044: decl local #3
2045: #
2046: decl local #4
2047: #
2048: decl local #5
2049: #
2050: decl local #6
2051: #
var couleurs := ReadConfigFile("::colors");
2052: decl local #7
2053: "::colors"
2054: Func(3,0): ReadConfigFile
2055: :=
2056: #
count := RandomDiceRoll(CStr(params[1]));
2057: local #2
2058: 1L
2059: [] 1
2060: Func(0,5): CStr
2061: Func(5,1): RandomDiceRoll
2062: local3 := 
params[1] := params[2];
2063: local #2
2064: 1L
2065: local #2
2066: 2L
2067: [] 1
2068: [] := (1) #
params[2] := params[3];
2069: local #2
2070: 2L
2071: local #2
2072: 3L
2073: [] 1
2074: [] := (1) #
params[3] := params[4];
2075: local #2
2076: 3L
2077: local #2
2078: 4L
2079: [] 1
2080: [] := (1) #
if (!count)
2081: local #3
2082: if true goto 2085
count := 1;
2083: 1L
2084: local3 := 
objname := params[1];
2085: local #2
2086: 1L
2087: [] 1
2088: local4 := 
if(CInt(params[2]))
2089: local #2
2090: 2L
2091: [] 1
2092: Func(0,0): CInt
2093: if false goto 2100
color := CInt(params[2]);
2094: local #2
2095: 2L
2096: [] 1
2097: Func(0,0): CInt
2098: local5 := 
2099: goto2192
elseif (params[2])
2100: local #2
2101: 2L
2102: [] 1
2103: if false goto 2192
color := 0;
2104: 0L
2105: local5 := 
var colorg := FindConfigElem(couleurs, params[2]);
2106: decl local #0
2107: local #7
2108: local #2
2109: 2L
2110: [] 1
2111: Func(3,1): FindConfigElem
2112: :=
2113: #
if(colorg)
2114: local #8
2115: if false goto 2191
var str := GetConfigStringArray(colorg, "color");
2116: decl local #0
2117: local #8
2118: "color"
2119: Func(3,3): GetConfigStringArray
2120: :=
2121: #
var ar := {};
2122: decl local #1
2123: array
2124: :=
2125: #
var rndint := RandomInt(len(str)) + 1;
2126: decl local #2
2127: local #9
2128: Func(0,4): len
2129: Func(5,0): RandomInt
2130: 1L
2131: +
2132: :=
2133: #
ar := SplitWords(str[rndint]);
2134: local #9
2135: local #11
2136: [] 1
2137: Func(0,1): SplitWords
2138: local10 := 
if(len(ar) > 1)
2139: local #10
2140: Func(0,4): len
2141: 1L
2142: >
2143: if false goto 2175
if(CInt(ar[2]) > 0)
2144: local #10
2145: 2L
2146: [] 1
2147: Func(0,0): CInt
2148: 0L
2149: >
2150: if false goto 2165
color := RandomInt(CInt(ar[2]) - CInt(ar[1]))+1;
2151: local #10
2152: 2L
2153: [] 1
2154: Func(0,0): CInt
2155: local #10
2156: 1L
2157: [] 1
2158: Func(0,0): CInt
2159: -
2160: Func(5,0): RandomInt
2161: 1L
2162: +
2163: local5 := 
2164: goto2174
color := CInt(str[RandomInt(len(str))+1]);
2165: local #9
2166: local #9
2167: Func(0,4): len
2168: Func(5,0): RandomInt
2169: 1L
2170: +
2171: [] 1
2172: Func(0,0): CInt
2173: local5 := 
2174: goto2184
color := CInt(str[RandomInt(len(str))+1]);
2175: local #9
2176: local #9
2177: Func(0,4): len
2178: Func(5,0): RandomInt
2179: 1L
2180: +
2181: [] 1
2182: Func(0,0): CInt
2183: local5 := 
if(color == 1)
2184: local #5
2185: 1L
2186: ==
2187: if false goto 2190
color := 0;
2188: 0L
2189: local5 := 
2190: leave block(3)
2191: leave block(1)
if (!color)
2192: local #5
2193: if true goto 2196
color := 0;
2194: 0L
2195: local5 := 
if(CInt(params[3]))
2196: local #2
2197: 3L
2198: [] 1
2199: Func(0,0): CInt
2200: if false goto 2207
chance := CInt(params[3]);
2201: local #2
2202: 3L
2203: [] 1
2204: Func(0,0): CInt
2205: local6 := 
2206: goto2209
chance := 100;
2207: 100L
2208: local6 := 
if(CInt(RandomInt(100)+1) <= CInt(chance))
2209: 100L
2210: Func(5,0): RandomInt
2211: 1L
2212: +
2213: Func(0,0): CInt
2214: local #6
2215: Func(0,0): CInt
2216: <=
2217: if false goto 2311
var i, canbemagic;
2218: decl local #0
2219: #
2220: decl local #1
2221: #
for(i:=1; i<=CInt(count); i:=i+1)
2222: local #8
2223: 1L
2224: :=
2225: #
2226: local #8
2227: local #3
2228: Func(0,0): CInt
2229: <=
2230: if false goto 2310
if (CInt(objname))
2231: local #4
2232: Func(0,0): CInt
2233: if false goto 2237
objname := CInt(objname);
2234: local #4
2235: Func(0,0): CInt
2236: local4 := 
var item := CreateItemInContainer(who, objname);
2237: decl local #0
2238: local #1
2239: local #4
2240: 1L
2241: Func(2,17): CreateItemInContainer
2242: :=
2243: #
item.color := color;
2244: local #10
2245: local #5
2246: set member 'color' #
if(making_starting_equipment)
2247: global #5
2248: if false goto 2254
item.newbie := 1;
2249: local #10
2250: 1L
2251: set member 'newbie' #
continue;
2252: leave block(1)
2253: goto2303
if( (item.graphic in array( 0xdf2, 0xdf3, 0xdf4, 0xdf5, 0x13f9 )) && (magicspaw
2254: local #10
2255: get member 'graphic'
2256: array
2257: 3570L
2258: +=
2259: 3571L
2260: +=
2261: 3572L
2262: +=
2263: 3573L
2264: +=
2265: 5113L
2266: +=
2267: in
2268: global #3
2269: 1L
2270: ==
2271: &&
2272: if false goto 2278
ProcessWand(item);
2273: local #10
2274: makelocal
2275: jmp userfunc @2758
2276: #
2277: goto2302
if(magicspawnchance == 1)
2278: global #3
2279: 1L
2280: ==
2281: if false goto 2302
canbemagic := MagicAllowedandType(objname);
2282: local #4
2283: makelocal
2284: jmp userfunc @2692
2285: local9 := 
case(canbemagic)
2286: local #9
2287: casejmp
	1: @2288
	2: @2293
	3: @2298
	default: @2302
WeaponTable(item);
2288: local #10
2289: makelocal
2290: jmp userfunc @2926
2291: #
2292: goto2302
ArmorTable(item);
2293: local #10
2294: makelocal
2295: jmp userfunc @3354
2296: #
2297: goto2302
ClothTable(item);
2298: local #10
2299: makelocal
2300: jmp userfunc @3440
2301: #
2302: leave block(1)
2303: local #8
2304: local #8
2305: 1L
2306: +
2307: :=
2308: #
2309: goto2226
2310: leave block(2)
2311: 0L
2312: return
C:/pol2/scripts/include/startEqp.inc, Line 350
function CreateFromRandomString(who, desc)
2313: pop param 'desc'
2314: pop param 'who'
var params := SplitWords(desc);
2315: decl local #2
2316: local #0
2317: Func(0,1): SplitWords
2318: :=
2319: #
var amt := Cint(params[1]);
2320: decl local #3
2321: local #2
2322: 1L
2323: [] 1
2324: Func(0,0): CInt
2325: :=
2326: #
var count := 1;
2327: decl local #4
2328: 1L
2329: :=
2330: #
if(amt != 1)
2331: local #3
2332: 1L
2333: <>
2334: if false goto 2341
count := RandomDiceRoll(Cstr(amt + 1));
2335: local #3
2336: 1L
2337: +
2338: Func(0,5): CStr
2339: Func(5,1): RandomDiceRoll
2340: local4 := 
var group := params[2];
2341: decl local #5
2342: local #2
2343: 2L
2344: [] 1
2345: :=
2346: #
var chance := params[4];
2347: decl local #6
2348: local #2
2349: 4L
2350: [] 1
2351: :=
2352: #
var elem := FindConfigElem(starteqp_cfg, group);
2353: decl local #7
2354: global #1
2355: local #5
2356: Func(3,1): FindConfigElem
2357: :=
2358: #
if(elem == error)
2359: local #7
2360: error
2361: ==
2362: if false goto 2370
syslog("Unable to find group " + group);
2363: "Unable to find group "
2364: local #5
2365: +
2366: Func(4,2): syslog
2367: #
return;
2368: ""
2369: return
var items := GetConfigStringArray(elem, "Item");
2370: decl local #8
2371: local #7
2372: "Item"
2373: Func(3,3): GetConfigStringArray
2374: :=
2375: #
if(items == error)
2376: local #8
2377: error
2378: ==
2379: if false goto 2389
syslog("Group " + group + " does not contain items!");
2380: "Group "
2381: local #5
2382: +
2383: " does not contain items!"
2384: +
2385: Func(4,2): syslog
2386: #
return;
2387: ""
2388: return
if(!chance)
2389: local #6
2390: if true goto 2393
chance := 100;
2391: 100L
2392: local6 := 
var rand := RandomInt(99)+1;
2393: decl local #9
2394: 99L
2395: Func(5,0): RandomInt
2396: 1L
2397: +
2398: :=
2399: #
if(CInt(rand) <= CInt(chance))
2400: local #9
2401: Func(0,0): CInt
2402: local #6
2403: Func(0,0): CInt
2404: <=
2405: if false goto 2447
if(count > len(items))
2406: local #4
2407: local #8
2408: Func(0,4): len
2409: >
2410: if false goto 2414
count := len(items);
2411: local #8
2412: Func(0,4): len
2413: local4 := 
while(count)
2414: local #4
2415: if false goto 2447
var n := RandomInt(len(items)) + 1;
2416: decl local #0
2417: local #8
2418: Func(0,4): len
2419: Func(5,0): RandomInt
2420: 1L
2421: +
2422: :=
2423: #
if(items[n])
2424: local #8
2425: local #10
2426: [] 1
2427: if false goto 2445
CreateFromItemString(who, items[n]);
2428: local #1
2429: local #8
2430: local #10
2431: [] 1
2432: makelocal
2433: jmp userfunc @2037
2434: #
if(making_starting_equipment)
2435: global #5
2436: if false goto 2441
items[n] := "";
2437: local #8
2438: local #10
2439: ""
2440: [] := (1) #
count := count - 1;
2441: local #4
2442: 1L
2443: -
2444: local4 := 
2445: leave block(1)
2446: goto2414
2447: 0L
2448: return
C:/pol2/scripts/include/startEqp.inc, Line 410
function CreateFromStackString(who, str)
2449: pop param 'str'
2450: pop param 'who'
var params := SplitWords(str);
2451: decl local #2
2452: local #0
2453: Func(0,1): SplitWords
2454: :=
2455: #
var count;
2456: decl local #3
2457: #
var objname;
2458: decl local #4
2459: #
var color;
2460: decl local #5
2461: #
var chance;
2462: decl local #6
2463: #
count := RandomDiceRoll(CStr(params[1]));
2464: local #2
2465: 1L
2466: [] 1
2467: Func(0,5): CStr
2468: Func(5,1): RandomDiceRoll
2469: local3 := 
params[1] := params[2];
2470: local #2
2471: 1L
2472: local #2
2473: 2L
2474: [] 1
2475: [] := (1) #
params[2] := params[3];
2476: local #2
2477: 2L
2478: local #2
2479: 3L
2480: [] 1
2481: [] := (1) #
params[3] := params[4];
2482: local #2
2483: 3L
2484: local #2
2485: 4L
2486: [] 1
2487: [] := (1) #
if (!count)
2488: local #3
2489: if true goto 2492
count := 1;
2490: 1L
2491: local3 := 
objname := params[1];
2492: local #2
2493: 1L
2494: [] 1
2495: local4 := 
if(CInt(params[2]))
2496: local #2
2497: 2L
2498: [] 1
2499: Func(0,0): CInt
2500: if false goto 2507
color := CInt(params[2]);
2501: local #2
2502: 2L
2503: [] 1
2504: Func(0,0): CInt
2505: local5 := 
2506: goto2509
color := 0;
2507: 0L
2508: local5 := 
if (CInt(params[3]))
2509: local #2
2510: 3L
2511: [] 1
2512: Func(0,0): CInt
2513: if false goto 2520
chance := CInt(params[3]);
2514: local #2
2515: 3L
2516: [] 1
2517: Func(0,0): CInt
2518: local6 := 
2519: goto2522
chance := 100;
2520: 100L
2521: local6 := 
var rand := RandomInt(100)+1;
2522: decl local #7
2523: 100L
2524: Func(5,0): RandomInt
2525: 1L
2526: +
2527: :=
2528: #
if(CInt(rand) <= CInt(chance))
2529: local #7
2530: Func(0,0): CInt
2531: local #6
2532: Func(0,0): CInt
2533: <=
2534: if false goto 2571
if (CInt(objname))
2535: local #4
2536: Func(0,0): CInt
2537: if false goto 2541
objname := CInt(objname);
2538: local #4
2539: Func(0,0): CInt
2540: local4 := 
var item := CreateItemInContainer(who, objname, count);
2541: decl local #0
2542: local #1
2543: local #4
2544: local #3
2545: Func(2,17): CreateItemInContainer
2546: :=
2547: #
if(!item)
2548: local #8
2549: if true goto 2562
syslog("Unable to create " + objname + " on " + who.name + ".");
2550: "Unable to create "
2551: local #4
2552: +
2553: " on "
2554: +
2555: local #1
2556: get member 'name'
2557: +
2558: "."
2559: +
2560: Func(4,2): syslog
2561: #
item.color := color;
2562: local #8
2563: local #5
2564: set member 'color' #
if(making_starting_equipment)
2565: global #5
2566: if false goto 2570
item.newbie := 1;
2567: local #8
2568: 1L
2569: set member 'newbie' #
2570: leave block(1)
2571: 0L
2572: return
C:/pol2/scripts/include/startEqp.inc, Line 390
function CreateFromUniqueString(who, str)
2573: pop param 'str'
2574: pop param 'who'
var params := SplitWords(str);
2575: decl local #2
2576: local #0
2577: Func(0,1): SplitWords
2578: :=
2579: #
var objtype;
2580: decl local #3
2581: #
if (CInt(params[1]))
2582: local #2
2583: 1L
2584: [] 1
2585: Func(0,0): CInt
2586: if false goto 2592
objtype := params[1];
2587: local #2
2588: 1L
2589: [] 1
2590: local3 := 
2591: goto2597
objtype := GetObjtypeByName(params[1]);
2592: local #2
2593: 1L
2594: [] 1
2595: Func(2,20): GetObjtypeByName
2596: local3 := 
if(!objtype)
2597: local #3
2598: if true goto 2608
syslog("Don't know what a " + str + " is");
2599: "Don't know what a "
2600: local #0
2601: +
2602: " is"
2603: +
2604: Func(4,2): syslog
2605: #
return;
2606: ""
2607: return
if(objtype in unique_items_created)
2608: local #3
2609: global #0
2610: in
2611: if false goto 2614
return;
2612: ""
2613: return
unique_items_created[len(unique_items_created) + 1] := objtype;
2614: global #0
2615: global #0
2616: Func(0,4): len
2617: 1L
2618: +
2619: local #3
2620: [] := (1) #
var newstr := "1 " + str;
2621: decl local #4
2622: "1 "
2623: local #0
2624: +
2625: :=
2626: #
CreateFromItemString(who, newstr);
2627: local #1
2628: local #4
2629: makelocal
2630: jmp userfunc @2037
2631: #
2632: 0L
2633: return
C:/pol2/scripts/include/attributes.inc, Line 84
Function DoRecalcVitals( mob )
2634: pop param 'mob'
set_critical(1);
2635: 1L
2636: Func(4,0): set_critical
2637: #
if(mob.acctname)
2638: local #0
2639: get member 'acctname'
2640: if false goto 2648
if(mob.ip)
2641: local #0
2642: get member 'ip'
2643: if false goto 2647
RecalcVitals(mob);
2644: local #0
2645: Func(2,0): RecalcVitals
2646: #
2647: goto2651
RecalcVitals(mob);
2648: local #0
2649: Func(2,0): RecalcVitals
2650: #
set_critical(0);
2651: 0L
2652: Func(4,0): set_critical
2653: #
2654: 0L
2655: return
C:/pol2/scripts/include/attributes.inc, Line 448
function GetHp(who)
2656: pop param 'who'
return Cint(GetVital(who, VITALID_LIFE)/ 100);
2657: local #0
2658: "Life"
2659: Func(2,10): GetVital
2660: 100L
2661: /
2662: Func(0,0): CInt
2663: return
C:/pol2/scripts/include/attributes.inc, Line 476
function GetNeededRawPointsToIncrease(basevalue)
2664: pop param 'basevalue'
if(basevalue < 200)
2665: local #0
2666: 200L
2667: <
2668: if false goto 2672
return 20.48;
2669: 20.48LF
2670: return
2671: goto2690
elseif(basevalue >= 2800)
2672: local #0
2673: 2800L
2674: >=
2675: if false goto 2680
return Cdbl(0x7fffffff);
2676: 2147483647L
2677: Func(0,2): CDbl
2678: return
2679: goto2690
return Cdbl(Pow(2.0, Cint(basevalue/100))* 10.24);
2680: 2LF
2681: local #0
2682: 100L
2683: /
2684: Func(0,0): CInt
2685: Func(6,0): Pow
2686: 10.24LF
2687: *
2688: Func(0,2): CDbl
2689: return
2690: 0L
2691: return
C:/pol2/scripts/include/startEqp.inc, Line 450
function MagicAllowedandType(objname)
2692: pop param 'objname'
var magicweapcfg := ReadConfigFile(":combat:magicweaps");
2693: decl local #1
2694: ":combat:magicweaps"
2695: Func(3,0): ReadConfigFile
2696: :=
2697: #
var magicarmorcfg := ReadConfigFile(":combat:magicarmor");
2698: decl local #2
2699: ":combat:magicarmor"
2700: Func(3,0): ReadConfigFile
2701: :=
2702: #
var magicclothcfg := ReadConfigFile(":combat:magiccloth");
2703: decl local #3
2704: ":combat:magiccloth"
2705: Func(3,0): ReadConfigFile
2706: :=
2707: #
var elem1 := FindConfigElem(magicweapcfg, "1");
2708: decl local #4
2709: local #1
2710: "1"
2711: Func(3,1): FindConfigElem
2712: :=
2713: #
var data1 := GetConfigInt(elem1, objname);
2714: decl local #5
2715: local #4
2716: local #0
2717: Func(3,2): GetConfigInt
2718: :=
2719: #
if(data1)
2720: local #5
2721: if false goto 2724
return 1;
2722: 1L
2723: return
var elem2 := FindConfigElem(magicarmorcfg, "1");
2724: decl local #6
2725: local #2
2726: "1"
2727: Func(3,1): FindConfigElem
2728: :=
2729: #
var data2 := GetConfigInt(elem2, objname);
2730: decl local #7
2731: local #6
2732: local #0
2733: Func(3,2): GetConfigInt
2734: :=
2735: #
if(data2)
2736: local #7
2737: if false goto 2740
return 2;
2738: 2L
2739: return
var elem3 := FindConfigElem(magicclothcfg, "1");
2740: decl local #8
2741: local #3
2742: "1"
2743: Func(3,1): FindConfigElem
2744: :=
2745: #
var data3 := GetConfigInt(elem3, objname);
2746: decl local #9
2747: local #8
2748: local #0
2749: Func(3,2): GetConfigInt
2750: :=
2751: #
if(data3)
2752: local #9
2753: if false goto 2756
return 3;
2754: 3L
2755: return
return 0;
2756: 0L
2757: return
C:/pol2/scripts/include/startEqp.inc, Line 175
function ProcessWand(item)
2758: pop param 'item'
var amt;
2759: decl local #1
2760: #
case(RandomInt(10) + 1)
2761: 10L
2762: Func(5,0): RandomInt
2763: 1L
2764: +
2765: casejmp
	1: @2766
	2: @2779
	3: @2792
	4: @2805
	5: @2818
	6: @2831
	7: @2844
	8: @2857
	9: @2870
	10: @2883
	default: @2895
amt :=  15;   SetObjProperty(item, "SpellId",  1);   SetObjProperty(item, "dama
2766: 15L
2767: local1 := 
SetObjProperty(item, "SpellId",  1);   SetObjProperty(item, "damagemod", "of cl
2768: local #0
2769: "SpellId"
2770: 1L
2771: Func(2,3): SetObjProperty
2772: #
SetObjProperty(item, "damagemod", "of clumsiness");
2773: local #0
2774: "damagemod"
2775: "of clumsiness"
2776: Func(2,3): SetObjProperty
2777: #
2778: goto2895
amt :=  15;   SetObjProperty(item, "SpellId",  3);   SetObjProperty(item, "dama
2779: 15L
2780: local1 := 
SetObjProperty(item, "SpellId",  3);   SetObjProperty(item, "damagemod", "of fe
2781: local #0
2782: "SpellId"
2783: 3L
2784: Func(2,3): SetObjProperty
2785: #
SetObjProperty(item, "damagemod", "of feeblemindedness");
2786: local #0
2787: "damagemod"
2788: "of feeblemindedness"
2789: Func(2,3): SetObjProperty
2790: #
2791: goto2895
amt :=  15;   SetObjProperty(item, "SpellId",  4);   SetObjProperty(item, "dama
2792: 15L
2793: local1 := 
SetObjProperty(item, "SpellId",  4);   SetObjProperty(item, "damagemod", "of he
2794: local #0
2795: "SpellId"
2796: 4L
2797: Func(2,3): SetObjProperty
2798: #
SetObjProperty(item, "damagemod", "of healing");
2799: local #0
2800: "damagemod"
2801: "of healing"
2802: Func(2,3): SetObjProperty
2803: #
2804: goto2895
amt :=  15;   SetObjProperty(item, "SpellId",  8);   SetObjProperty(item, "dama
2805: 15L
2806: local1 := 
SetObjProperty(item, "SpellId",  8);   SetObjProperty(item, "damagemod", "of we
2807: local #0
2808: "SpellId"
2809: 8L
2810: Func(2,3): SetObjProperty
2811: #
SetObjProperty(item, "damagemod", "of weakness");
2812: local #0
2813: "damagemod"
2814: "of weakness"
2815: Func(2,3): SetObjProperty
2816: #
2817: goto2895
amt :=  10;   SetObjProperty(item, "SpellId", 12);   SetObjProperty(item, "dama
2818: 10L
2819: local1 := 
SetObjProperty(item, "SpellId", 12);   SetObjProperty(item, "damagemod", "of ha
2820: local #0
2821: "SpellId"
2822: 12L
2823: Func(2,3): SetObjProperty
2824: #
SetObjProperty(item, "damagemod", "of harming");
2825: local #0
2826: "damagemod"
2827: "of harming"
2828: Func(2,3): SetObjProperty
2829: #
2830: goto2895
amt :=   5;   SetObjProperty(item, "SpellId", 18);   SetObjProperty(item, "dama
2831: 5L
2832: local1 := 
SetObjProperty(item, "SpellId", 18);   SetObjProperty(item, "damagemod", "of fi
2833: local #0
2834: "SpellId"
2835: 18L
2836: Func(2,3): SetObjProperty
2837: #
SetObjProperty(item, "damagemod", "of fireballs");
2838: local #0
2839: "damagemod"
2840: "of fireballs"
2841: Func(2,3): SetObjProperty
2842: #
2843: goto2895
amt :=   5;   SetObjProperty(item, "SpellId", 29);   SetObjProperty(item, "dama
2844: 5L
2845: local1 := 
SetObjProperty(item, "SpellId", 29);   SetObjProperty(item, "damagemod", "of gr
2846: local #0
2847: "SpellId"
2848: 29L
2849: Func(2,3): SetObjProperty
2850: #
SetObjProperty(item, "damagemod", "of greater healing");
2851: local #0
2852: "damagemod"
2853: "of greater healing"
2854: Func(2,3): SetObjProperty
2855: #
2856: goto2895
amt :=   3;   SetObjProperty(item, "SpellId", 30);   SetObjProperty(item, "dama
2857: 3L
2858: local1 := 
SetObjProperty(item, "SpellId", 30);   SetObjProperty(item, "damagemod", "of li
2859: local #0
2860: "SpellId"
2861: 30L
2862: Func(2,3): SetObjProperty
2863: #
SetObjProperty(item, "damagemod", "of lightning");
2864: local #0
2865: "damagemod"
2866: "of lightning"
2867: Func(2,3): SetObjProperty
2868: #
2869: goto2895
amt :=  10;   SetObjProperty(item, "SpellId", 31);   SetObjProperty(item, "dama
2870: 10L
2871: local1 := 
SetObjProperty(item, "SpellId", 31);   SetObjProperty(item, "damagemod", "of ma
2872: local #0
2873: "SpellId"
2874: 31L
2875: Func(2,3): SetObjProperty
2876: #
SetObjProperty(item, "damagemod", "of mana draining");
2877: local #0
2878: "damagemod"
2879: "of mana draining"
2880: Func(2,3): SetObjProperty
2881: #
2882: goto2895
amt := 100;   SetObjProperty(item, "SpellId", 65);   SetObjProperty(item, "dama
2883: 100L
2884: local1 := 
SetObjProperty(item, "SpellId", 65);   SetObjProperty(item, "damagemod", "of id
2885: local #0
2886: "SpellId"
2887: 65L
2888: Func(2,3): SetObjProperty
2889: #
SetObjProperty(item, "damagemod", "of identification");
2890: local #0
2891: "damagemod"
2892: "of identification"
2893: Func(2,3): SetObjProperty
2894: #
SetObjProperty(item, "charges", (amt + RandomInt(10)));
2895: local #0
2896: "charges"
2897: local #1
2898: 10L
2899: Func(5,0): RandomInt
2900: +
2901: Func(2,3): SetObjProperty
2902: #
item.usescript := ":wands:magicWands";
2903: local #0
2904: ":wands:magicWands"
2905: set member 'usescript' #
var dsc;
2906: decl local #2
2907: #
if(item.objtype == 0x13f9)
2908: local #0
2909: get member 'objtype'
2910: 5113L
2911: ==
2912: if false goto 2916
dsc := "gnarled staff";
2913: "gnarled staff"
2914: local2 := 
2915: goto2918
dsc := "wand";
2916: "wand"
2917: local2 := 
SetName(item, "a magic " + dsc);
2918: local #0
2919: "a magic "
2920: local #2
2921: +
2922: Func(2,18): SetName
2923: #
2924: 0L
2925: return
C:/pol2/scripts/include/startEqp.inc, Line 317
function WeaponTable(item)
2926: pop param 'item'
var newarray := array(1, 2, 3);
2927: decl local #1
2928: array
2929: 1L
2930: +=
2931: 2L
2932: +=
2933: 3L
2934: +=
2935: :=
2936: #
var count := RandomInt(100) + 1;
2937: decl local #2
2938: 100L
2939: Func(5,0): RandomInt
2940: 1L
2941: +
2942: :=
2943: #
var counter;
2944: decl local #3
2945: #
if(count >= 60)
2946: local #2
2947: 60L
2948: >=
2949: if false goto 2953
counter := 1;
2950: 1L
2951: local3 := 
2952: goto2969
elseif(count >= 40)
2953: local #2
2954: 40L
2955: >=
2956: if false goto 2960
counter := 2;
2957: 2L
2958: local3 := 
2959: goto2969
elseif(count >= 10)
2960: local #2
2961: 10L
2962: >=
2963: if false goto 2967
counter := 3;
2964: 3L
2965: local3 := 
2966: goto2969
counter := 4;
2967: 4L
2968: local3 := 
if(counter == 1)
2969: local #3
2970: 1L
2971: ==
2972: if false goto 2978
DestroyItem(item);
2973: local #0
2974: Func(2,19): DestroyItem
2975: #
return;
2976: ""
2977: return
count := 0;
2978: 0L
2979: local2 := 
var num, val;
2980: decl local #4
2981: #
2982: decl local #5
2983: #
while(count <= counter)
2984: local #2
2985: local #3
2986: <=
2987: if false goto 3023
num := RandomInt(len(newarray)) + 1;
2988: local #1
2989: Func(0,4): len
2990: Func(5,0): RandomInt
2991: 1L
2992: +
2993: local4 := 
val := newarray[num];
2994: local #1
2995: local #4
2996: [] 1
2997: local5 := 
case(val)
2998: local #5
2999: casejmp
	1: @3000
	2: @3005
	3: @3010
	default: @3014
ApplyAccyMod(item);
3000: local #0
3001: makelocal
3002: jmp userfunc @3076
3003: #
3004: goto3014
ApplyHPMod(item);
3005: local #0
3006: makelocal
3007: jmp userfunc @3253
3008: #
3009: goto3014
ApplyDmgMod(item);
3010: local #0
3011: makelocal
3012: jmp userfunc @3167
3013: #
newarray.erase(num);
3014: local #1
3015: local #4
3016: Call Method erase (1 params)
3017: #
count := count + 1;
3018: local #2
3019: 1L
3020: +
3021: local2 := 
3022: goto2984
AddName(item);
3023: local #0
3024: makelocal
3025: jmp userfunc @3029
3026: #
3027: 0L
3028: return
C:/pol2/scripts/include/startEqp.inc, Line 582
function AddName(item)
3029: pop param 'item'
var currdesc := item.desc;
3030: decl local #1
3031: local #0
3032: get member 'desc'
3033: :=
3034: #
if(currdesc[1] == "a")
3035: local #1
3036: 1L
3037: [] 1
3038: "a"
3039: ==
3040: if false goto 3068
var space := find(item.desc, " ", 1);
3041: decl local #0
3042: local #0
3043: get member 'desc'
3044: " "
3045: 1L
3046: Func(0,6): find
3047: :=
3048: #
var newname := currdesc[space+1,len(item.desc)];
3049: decl local #1
3050: local #1
3051: local #2
3052: 1L
3053: +
3054: local #0
3055: get member 'desc'
3056: Func(0,4): len
3057: [,]
3058: :=
3059: #
SetName(item,"a magic " + newname);
3060: local #0
3061: "a magic "
3062: local #3
3063: +
3064: Func(2,18): SetName
3065: #
3066: leave block(2)
3067: goto3074
SetName(item, "magic " + currdesc);
3068: local #0
3069: "magic "
3070: local #1
3071: +
3072: Func(2,18): SetName
3073: #
3074: 0L
3075: return
C:/pol2/scripts/include/startEqp.inc, Line 496
function ApplyAccyMod(item)
3076: pop param 'item'
var numb := ((RandomInt(100)+1) - magicadjustment);
3077: decl local #1
3078: 100L
3079: Func(5,0): RandomInt
3080: 1L
3081: +
3082: global #4
3083: -
3084: :=
3085: #
if(numb < 1)
3086: local #1
3087: 1L
3088: <
3089: if false goto 3092
numb := 1;
3090: 1L
3091: local1 := 
var modifier := 0;
3092: decl local #2
3093: 0L
3094: :=
3095: #
if(numb >= 50)
3096: local #1
3097: 50L
3098: >=
3099: if false goto 3108
modifier := 5;
3100: 5L
3101: local2 := 
SetObjProperty(item, "accuracy", "accurate");
3102: local #0
3103: "accuracy"
3104: "accurate"
3105: Func(2,3): SetObjProperty
3106: #
3107: goto3155
elseif(numb >= 25)
3108: local #1
3109: 25L
3110: >=
3111: if false goto 3120
modifier := 10;
3112: 10L
3113: local2 := 
SetObjProperty(item, "accuracy", "surpassingly accurate");
3114: local #0
3115: "accuracy"
3116: "surpassingly accurate"
3117: Func(2,3): SetObjProperty
3118: #
3119: goto3155
elseif(numb >= 15)
3120: local #1
3121: 15L
3122: >=
3123: if false goto 3132
modifier := 15;
3124: 15L
3125: local2 := 
SetObjProperty(item, "accuracy", "eminently accurate");
3126: local #0
3127: "accuracy"
3128: "eminently accurate"
3129: Func(2,3): SetObjProperty
3130: #
3131: goto3155
elseif(numb >= 5)
3132: local #1
3133: 5L
3134: >=
3135: if false goto 3144
modifier := 20;
3136: 20L
3137: local2 := 
SetObjProperty(item, "accuracy", "exceedingly accurate");
3138: local #0
3139: "accuracy"
3140: "exceedingly accurate"
3141: Func(2,3): SetObjProperty
3142: #
3143: goto3155
elseif(numb >= 1)
3144: local #1
3145: 1L
3146: >=
3147: if false goto 3155
modifier := 25;
3148: 25L
3149: local2 := 
SetObjProperty(item, "accuracy", "supremely accurate");
3150: local #0
3151: "accuracy"
3152: "supremely accurate"
3153: Func(2,3): SetObjProperty
3154: #
SetObjProperty(item, "type", "accuracy");
3155: local #0
3156: "type"
3157: "accuracy"
3158: Func(2,3): SetObjProperty
3159: #
SetObjProperty(item, "gain", modifier);
3160: local #0
3161: "gain"
3162: local #2
3163: Func(2,3): SetObjProperty
3164: #
3165: 0L
3166: return
C:/pol2/scripts/include/startEqp.inc, Line 472
function ApplyDmgMod(item)
3167: pop param 'item'
var numb := ((RandomInt(100)+1) - magicadjustment);
3168: decl local #1
3169: 100L
3170: Func(5,0): RandomInt
3171: 1L
3172: +
3173: global #4
3174: -
3175: :=
3176: #
if(numb < 1)
3177: local #1
3178: 1L
3179: <
3180: if false goto 3183
numb := 1;
3181: 1L
3182: local1 := 
if(numb >= 50)
3183: local #1
3184: 50L
3185: >=
3186: if false goto 3196
item.dmg_mod := 1;
3187: local #0
3188: 1L
3189: set member 'dmg_mod' #
SetObjProperty(item, "damagemod", "of ruin");
3190: local #0
3191: "damagemod"
3192: "of ruin"
3193: Func(2,3): SetObjProperty
3194: #
3195: goto3247
elseif(numb >= 25)
3196: local #1
3197: 25L
3198: >=
3199: if false goto 3209
item.dmg_mod := 3;
3200: local #0
3201: 3L
3202: set member 'dmg_mod' #
SetObjProperty(item, "damagemod", "of might");
3203: local #0
3204: "damagemod"
3205: "of might"
3206: Func(2,3): SetObjProperty
3207: #
3208: goto3247
elseif(numb >= 15)
3209: local #1
3210: 15L
3211: >=
3212: if false goto 3222
item.dmg_mod := 5;
3213: local #0
3214: 5L
3215: set member 'dmg_mod' #
SetObjProperty(item, "damagemod", "of force");
3216: local #0
3217: "damagemod"
3218: "of force"
3219: Func(2,3): SetObjProperty
3220: #
3221: goto3247
elseif(numb >= 5)
3222: local #1
3223: 5L
3224: >=
3225: if false goto 3235
item.dmg_mod := 7;
3226: local #0
3227: 7L
3228: set member 'dmg_mod' #
SetObjProperty(item, "damagemod", "of power");
3229: local #0
3230: "damagemod"
3231: "of power"
3232: Func(2,3): SetObjProperty
3233: #
3234: goto3247
elseif(numb >= 1)
3235: local #1
3236: 1L
3237: >=
3238: if false goto 3247
item.dmg_mod := 9;
3239: local #0
3240: 9L
3241: set member 'dmg_mod' #
SetObjProperty(item, "damagemod", "of vanquishing");
3242: local #0
3243: "damagemod"
3244: "of vanquishing"
3245: Func(2,3): SetObjProperty
3246: #
SilverMod(item);
3247: local #0
3248: makelocal
3249: jmp userfunc @3804
3250: #
3251: 0L
3252: return
C:/pol2/scripts/include/startEqp.inc, Line 522
function ApplyHPMod(item)
3253: pop param 'item'
var numb := ((RandomInt(100)+1) - magicadjustment);
3254: decl local #1
3255: 100L
3256: Func(5,0): RandomInt
3257: 1L
3258: +
3259: global #4
3260: -
3261: :=
3262: #
if(numb < 1)
3263: local #1
3264: 1L
3265: <
3266: if false goto 3269
numb := 1;
3267: 1L
3268: local1 := 
if(numb >= 50)
3269: local #1
3270: 50L
3271: >=
3272: if false goto 3285
item.maxhp_mod := item.maxhp_mod + 05;
3273: local #0
3274: local #0
3275: get member 'maxhp_mod'
3276: 5L
3277: +
3278: set member 'maxhp_mod' #
SetObjProperty(item, "durability", "durable");
3279: local #0
3280: "durability"
3281: "durable"
3282: Func(2,3): SetObjProperty
3283: #
3284: goto3348
elseif(numb >= 25)
3285: local #1
3286: 25L
3287: >=
3288: if false goto 3301
item.maxhp_mod := item.maxhp_mod + 10;
3289: local #0
3290: local #0
3291: get member 'maxhp_mod'
3292: 10L
3293: +
3294: set member 'maxhp_mod' #
SetObjProperty(item, "durability", "substantial");
3295: local #0
3296: "durability"
3297: "substantial"
3298: Func(2,3): SetObjProperty
3299: #
3300: goto3348
elseif(numb >= 15)
3301: local #1
3302: 15L
3303: >=
3304: if false goto 3317
item.maxhp_mod := item.maxhp_mod + 15;
3305: local #0
3306: local #0
3307: get member 'maxhp_mod'
3308: 15L
3309: +
3310: set member 'maxhp_mod' #
SetObjProperty(item, "durability", "massive");
3311: local #0
3312: "durability"
3313: "massive"
3314: Func(2,3): SetObjProperty
3315: #
3316: goto3348
elseif(numb >= 5)
3317: local #1
3318: 5L
3319: >=
3320: if false goto 3333
item.maxhp_mod := item.maxhp_mod + 20;
3321: local #0
3322: local #0
3323: get member 'maxhp_mod'
3324: 20L
3325: +
3326: set member 'maxhp_mod' #
SetObjProperty(item, "durability", "fortified");
3327: local #0
3328: "durability"
3329: "fortified"
3330: Func(2,3): SetObjProperty
3331: #
3332: goto3348
elseif(numb >= 1)
3333: local #1
3334: 1L
3335: >=
3336: if false goto 3348
item.maxhp_mod := item.maxhp_mod + 25;
3337: local #0
3338: local #0
3339: get member 'maxhp_mod'
3340: 25L
3341: +
3342: set member 'maxhp_mod' #
SetObjProperty(item, "durability", "indestructable");
3343: local #0
3344: "durability"
3345: "indestructable"
3346: Func(2,3): SetObjProperty
3347: #
item.hp := item.maxhp;
3348: local #0
3349: local #0
3350: get member 'maxhp'
3351: set member 'hp' #
3352: 0L
3353: return
C:/pol2/scripts/include/startEqp.inc, Line 236
function ArmorTable(item)
3354: pop param 'item'
var newarray := {1, 2};
3355: decl local #1
3356: array
3357: 1L
3358: +=
3359: 2L
3360: +=
3361: :=
3362: #
var count := RandomInt(99) + 1;
3363: decl local #2
3364: 99L
3365: Func(5,0): RandomInt
3366: 1L
3367: +
3368: :=
3369: #
var counter;
3370: decl local #3
3371: #
if(count >= 40)
3372: local #2
3373: 40L
3374: >=
3375: if false goto 3379
counter := 1;
3376: 1L
3377: local3 := 
3378: goto3381
counter := 2;
3379: 2L
3380: local3 := 
count := 0;
3381: 0L
3382: local2 := 
var num;
3383: decl local #4
3384: #
while(count <= counter)
3385: local #2
3386: local #3
3387: <=
3388: if false goto 3423
num := RandomInt(99) + 1;
3389: 99L
3390: Func(5,0): RandomInt
3391: 1L
3392: +
3393: local4 := 
if(num >=  50)
3394: local #4
3395: 50L
3396: >=
3397: if false goto 3401
num := 1;
3398: 1L
3399: local4 := 
3400: goto3403
num := 2;
3401: 2L
3402: local4 := 
case(num)
3403: local #4
3404: casejmp
	1: @3405
	2: @3410
	default: @3414
ApplyHPMod(item);
3405: local #0
3406: makelocal
3407: jmp userfunc @3253
3408: #
3409: goto3414
ApplyARMod(item);
3410: local #0
3411: makelocal
3412: jmp userfunc @3843
3413: #
newarray.erase(num);
3414: local #1
3415: local #4
3416: Call Method erase (1 params)
3417: #
count := count + 1;
3418: local #2
3419: 1L
3420: +
3421: local2 := 
3422: goto3385
if((RandomInt(10)+1) <= 1)
3423: 10L
3424: Func(5,0): RandomInt
3425: 1L
3426: +
3427: 1L
3428: <=
3429: if false goto 3434
ExtraArmorTable(item);
3430: local #0
3431: makelocal
3432: jmp userfunc @3617
3433: #
AddName(item);
3434: local #0
3435: makelocal
3436: jmp userfunc @3029
3437: #
3438: 0L
3439: return
C:/pol2/scripts/include/startEqp.inc, Line 200
function ClothTable(item)
3440: pop param 'item'
var val := RandomInt(19) + 1;
3441: decl local #1
3442: 19L
3443: Func(5,0): RandomInt
3444: 1L
3445: +
3446: :=
3447: #
if(val >= 14)
3448: local #1
3449: 14L
3450: >=
3451: if false goto 3476
var charges := RandomDiceRoll("1d30") + 10;
3452: decl local #0
3453: "1d30"
3454: Func(5,1): RandomDiceRoll
3455: 10L
3456: +
3457: :=
3458: #
SetObjProperty(item, "charges", charges);
3459: local #0
3460: "charges"
3461: local #2
3462: Func(2,3): SetObjProperty
3463: #
SetObjProperty(item, "type", "sight");
3464: local #0
3465: "type"
3466: "sight"
3467: Func(2,3): SetObjProperty
3468: #
SetObjProperty(item, "damagemod", " of nightsight");
3469: local #0
3470: "damagemod"
3471: " of nightsight"
3472: Func(2,3): SetObjProperty
3473: #
3474: leave block(1)
3475: goto3611
elseif(val >= 11)
3476: local #1
3477: 11L
3478: >=
3479: if false goto 3504
var charges := RandomDiceRoll("1d30") + 10;
3480: decl local #0
3481: "1d30"
3482: Func(5,1): RandomDiceRoll
3483: 10L
3484: +
3485: :=
3486: #
SetObjProperty(item, "charges", charges);
3487: local #0
3488: "charges"
3489: local #2
3490: Func(2,3): SetObjProperty
3491: #
SetObjProperty(item, "type", "protection");
3492: local #0
3493: "type"
3494: "protection"
3495: Func(2,3): SetObjProperty
3496: #
SetObjProperty(item, "damagemod", " of protection");
3497: local #0
3498: "damagemod"
3499: " of protection"
3500: Func(2,3): SetObjProperty
3501: #
3502: leave block(1)
3503: goto3611
elseif(val <= 8)
3504: local #1
3505: 8L
3506: <=
3507: if false goto 3532
var charges := RandomDiceRoll("1d30") + 10;
3508: decl local #0
3509: "1d30"
3510: Func(5,1): RandomDiceRoll
3511: 10L
3512: +
3513: :=
3514: #
SetObjProperty(item, "charges", charges);
3515: local #0
3516: "charges"
3517: local #2
3518: Func(2,3): SetObjProperty
3519: #
SetObjProperty(item, "type", "strength");
3520: local #0
3521: "type"
3522: "strength"
3523: Func(2,3): SetObjProperty
3524: #
SetObjProperty(item, "damagemod", " of strength");
3525: local #0
3526: "damagemod"
3527: " of strength"
3528: Func(2,3): SetObjProperty
3529: #
3530: leave block(1)
3531: goto3611
elseif(val > 5)
3532: local #1
3533: 5L
3534: >
3535: if false goto 3560
var charges := RandomDiceRoll("1d30") + 10;
3536: decl local #0
3537: "1d30"
3538: Func(5,1): RandomDiceRoll
3539: 10L
3540: +
3541: :=
3542: #
SetObjProperty(item, "charges", charges);
3543: local #0
3544: "charges"
3545: local #2
3546: Func(2,3): SetObjProperty
3547: #
SetObjProperty(item, "type", "invisibility");
3548: local #0
3549: "type"
3550: "invisibility"
3551: Func(2,3): SetObjProperty
3552: #
SetObjProperty(item, "damagemod", " of invisibility");
3553: local #0
3554: "damagemod"
3555: " of invisibility"
3556: Func(2,3): SetObjProperty
3557: #
3558: leave block(1)
3559: goto3611
elseif(val == 3)
3560: local #1
3561: 3L
3562: ==
3563: if false goto 3588
var charges := RandomDiceRoll("1d30") + 10;
3564: decl local #0
3565: "1d30"
3566: Func(5,1): RandomDiceRoll
3567: 10L
3568: +
3569: :=
3570: #
SetObjProperty(item, "charges", charges);
3571: local #0
3572: "charges"
3573: local #2
3574: Func(2,3): SetObjProperty
3575: #
SetObjProperty(item, "type", "blessing");
3576: local #0
3577: "type"
3578: "blessing"
3579: Func(2,3): SetObjProperty
3580: #
SetObjProperty(item, "damagemod", " of blessing");
3581: local #0
3582: "damagemod"
3583: " of blessing"
3584: Func(2,3): SetObjProperty
3585: #
3586: leave block(1)
3587: goto3611
var charges := RandomDiceRoll("1d30") + 10;
3588: decl local #0
3589: "1d30"
3590: Func(5,1): RandomDiceRoll
3591: 10L
3592: +
3593: :=
3594: #
SetObjProperty(item, "charges", charges);
3595: local #0
3596: "charges"
3597: local #2
3598: Func(2,3): SetObjProperty
3599: #
SetObjProperty(item, "type", "reflect");
3600: local #0
3601: "type"
3602: "reflect"
3603: Func(2,3): SetObjProperty
3604: #
SetObjProperty(item, "damagemod", " of magic reflection");
3605: local #0
3606: "damagemod"
3607: " of magic reflection"
3608: Func(2,3): SetObjProperty
3609: #
3610: leave block(1)
AddName(item);
3611: local #0
3612: makelocal
3613: jmp userfunc @3029
3614: #
3615: 0L
3616: return
C:/pol2/scripts/include/startEqp.inc, Line 267
function ExtraArmorTable(item)
3617: pop param 'item'
var val := RandomInt(4) + 1;
3618: decl local #1
3619: 4L
3620: Func(5,0): RandomInt
3621: 1L
3622: +
3623: :=
3624: #
case(val)
3625: local #1
3626: casejmp
	1: @3627
	2: @3671
	3: @3715
	4: @3759
	default: @3802
var charges := RandomDiceRoll("1d30") + 10;
3627: decl local #0
3628: "1d30"
3629: Func(5,1): RandomDiceRoll
3630: 10L
3631: +
3632: :=
3633: #
SetObjProperty(item, "charges", charges);
3634: local #0
3635: "charges"
3636: local #2
3637: Func(2,3): SetObjProperty
3638: #
SetObjProperty(item, "type", "protection");
3639: local #0
3640: "type"
3641: "protection"
3642: Func(2,3): SetObjProperty
3643: #
var dmgmod := GetObjProperty(item, "damagemod");
3644: decl local #1
3645: local #0
3646: "damagemod"
3647: Func(2,1): GetObjProperty
3648: :=
3649: #
if(dmgmod)
3650: local #3
3651: if false goto 3662
dmgmod := dmgmod + " and protection";
3652: local #3
3653: " and protection"
3654: +
3655: local3 := 
SetObjProperty(item, "damagemod", dmgmod);
3656: local #0
3657: "damagemod"
3658: local #3
3659: Func(2,3): SetObjProperty
3660: #
3661: goto3669
dmgmod := " of protection";
3662: " of protection"
3663: local3 := 
SetObjProperty(item, "damagemod", dmgmod);
3664: local #0
3665: "damagemod"
3666: local #3
3667: Func(2,3): SetObjProperty
3668: #
3669: leave block(2)
3670: goto3802
var charges := RandomDiceRoll("1d30") + 10;
3671: decl local #0
3672: "1d30"
3673: Func(5,1): RandomDiceRoll
3674: 10L
3675: +
3676: :=
3677: #
SetObjProperty(item, "charges", charges);
3678: local #0
3679: "charges"
3680: local #2
3681: Func(2,3): SetObjProperty
3682: #
SetObjProperty(item, "type", "strength");
3683: local #0
3684: "type"
3685: "strength"
3686: Func(2,3): SetObjProperty
3687: #
var dmgmod := GetObjProperty(item, "damagemod");
3688: decl local #1
3689: local #0
3690: "damagemod"
3691: Func(2,1): GetObjProperty
3692: :=
3693: #
if(dmgmod)
3694: local #3
3695: if false goto 3706
dmgmod := dmgmod + " and strength";
3696: local #3
3697: " and strength"
3698: +
3699: local3 := 
SetObjProperty(item, "damagemod", dmgmod);
3700: local #0
3701: "damagemod"
3702: local #3
3703: Func(2,3): SetObjProperty
3704: #
3705: goto3713
dmgmod := " of strength";
3706: " of strength"
3707: local3 := 
SetObjProperty(item, "damagemod", dmgmod);
3708: local #0
3709: "damagemod"
3710: local #3
3711: Func(2,3): SetObjProperty
3712: #
3713: leave block(2)
3714: goto3802
var charges := RandomDiceRoll("1d30") + 10;
3715: decl local #0
3716: "1d30"
3717: Func(5,1): RandomDiceRoll
3718: 10L
3719: +
3720: :=
3721: #
SetObjProperty(item, "charges", charges);
3722: local #0
3723: "charges"
3724: local #2
3725: Func(2,3): SetObjProperty
3726: #
SetObjProperty(item, "type", "blessing");
3727: local #0
3728: "type"
3729: "blessing"
3730: Func(2,3): SetObjProperty
3731: #
var dmgmod := GetObjProperty(item, "damagemod");
3732: decl local #1
3733: local #0
3734: "damagemod"
3735: Func(2,1): GetObjProperty
3736: :=
3737: #
if(dmgmod)
3738: local #3
3739: if false goto 3750
dmgmod := dmgmod + " and blessing";
3740: local #3
3741: " and blessing"
3742: +
3743: local3 := 
SetObjProperty(item, "damagemod", dmgmod);
3744: local #0
3745: "damagemod"
3746: local #3
3747: Func(2,3): SetObjProperty
3748: #
3749: goto3757
dmgmod := " of blessing";
3750: " of blessing"
3751: local3 := 
SetObjProperty(item, "damagemod", dmgmod);
3752: local #0
3753: "damagemod"
3754: local #3
3755: Func(2,3): SetObjProperty
3756: #
3757: leave block(2)
3758: goto3802
var charges := RandomDiceRoll("1d30") + 10;
3759: decl local #0
3760: "1d30"
3761: Func(5,1): RandomDiceRoll
3762: 10L
3763: +
3764: :=
3765: #
SetObjProperty(item, "charges", charges);
3766: local #0
3767: "charges"
3768: local #2
3769: Func(2,3): SetObjProperty
3770: #
SetObjProperty(item, "type", "reflect");
3771: local #0
3772: "type"
3773: "reflect"
3774: Func(2,3): SetObjProperty
3775: #
var dmgmod := GetObjProperty(item, "damagemod");
3776: decl local #1
3777: local #0
3778: "damagemod"
3779: Func(2,1): GetObjProperty
3780: :=
3781: #
if(dmgmod)
3782: local #3
3783: if false goto 3794
dmgmod := dmgmod + " and magic reflection";
3784: local #3
3785: " and magic reflection"
3786: +
3787: local3 := 
SetObjProperty(item, "damagemod", dmgmod);
3788: local #0
3789: "damagemod"
3790: local #3
3791: Func(2,3): SetObjProperty
3792: #
3793: goto3801
dmgmod := " of magic reflection";
3794: " of magic reflection"
3795: local3 := 
SetObjProperty(item, "damagemod", dmgmod);
3796: local #0
3797: "damagemod"
3798: local #3
3799: Func(2,3): SetObjProperty
3800: #
3801: leave block(2)
3802: 0L
3803: return
C:/pol2/scripts/include/startEqp.inc, Line 569
function SilverMod(item)
3804: pop param 'item'
var numb := (RandomInt(10) + 1);
3805: decl local #1
3806: 10L
3807: Func(5,0): RandomInt
3808: 1L
3809: +
3810: :=
3811: #
if(numb == 1)
3812: local #1
3813: 1L
3814: ==
3815: if false goto 3841
var hits := GetObjProperty(item, "OnHit");
3816: decl local #0
3817: local #0
3818: "OnHit"
3819: Func(2,1): GetObjProperty
3820: :=
3821: #
if(!hits)
3822: local #2
3823: if true goto 3826
hits := {};
3824: array
3825: local2 := 
hits.append("silverHit");
3826: local #2
3827: "silverHit"
3828: Call Method append (1 params)
3829: #
SetObjProperty(item, "OnHit", hits);
3830: local #0
3831: "OnHit"
3832: local #2
3833: Func(2,3): SetObjProperty
3834: #
SetObjProperty(item, "silvermod", 1);
3835: local #0
3836: "silvermod"
3837: 1L
3838: Func(2,3): SetObjProperty
3839: #
3840: leave block(1)
3841: 0L
3842: return
C:/pol2/scripts/include/startEqp.inc, Line 546
function ApplyARMod(item)
3843: pop param 'item'
var numb := ((RandomInt(100)+1) - magicadjustment);
3844: decl local #1
3845: 100L
3846: Func(5,0): RandomInt
3847: 1L
3848: +
3849: global #4
3850: -
3851: :=
3852: #
if(numb < 1)
3853: local #1
3854: 1L
3855: <
3856: if false goto 3859
numb := 1;
3857: 1L
3858: local1 := 
if(numb >= 50)
3859: local #1
3860: 50L
3861: >=
3862: if false goto 3872
item.ar_mod := 5;
3863: local #0
3864: 5L
3865: set member 'ar_mod' #
SetObjProperty(item, "damagemod", "of defense");
3866: local #0
3867: "damagemod"
3868: "of defense"
3869: Func(2,3): SetObjProperty
3870: #
3871: goto3923
elseif(numb >= 25)
3872: local #1
3873: 25L
3874: >=
3875: if false goto 3885
item.ar_mod := 10;
3876: local #0
3877: 10L
3878: set member 'ar_mod' #
SetObjProperty(item, "damagemod", "of guarding");
3879: local #0
3880: "damagemod"
3881: "of guarding"
3882: Func(2,3): SetObjProperty
3883: #
3884: goto3923
elseif(numb >= 15)
3885: local #1
3886: 15L
3887: >=
3888: if false goto 3898
item.ar_mod := 15;
3889: local #0
3890: 15L
3891: set member 'ar_mod' #
SetObjProperty(item, "damagemod", "of hardening");
3892: local #0
3893: "damagemod"
3894: "of hardening"
3895: Func(2,3): SetObjProperty
3896: #
3897: goto3923
elseif(numb >= 5)
3898: local #1
3899: 5L
3900: >=
3901: if false goto 3911
item.ar_mod := 20;
3902: local #0
3903: 20L
3904: set member 'ar_mod' #
SetObjProperty(item, "damagemod", "of fortification");
3905: local #0
3906: "damagemod"
3907: "of fortification"
3908: Func(2,3): SetObjProperty
3909: #
3910: goto3923
elseif(numb >= 1)
3911: local #1
3912: 1L
3913: >=
3914: if false goto 3923
item.ar_mod := 25;
3915: local #0
3916: 25L
3917: set member 'ar_mod' #
SetObjProperty(item, "damagemod", "of invulnerability");
3918: local #0
3919: "damagemod"
3920: "of invulnerability"
3921: Func(2,3): SetObjProperty
3922: #
3923: 0L
3924: return
