C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 225
var GFref := struct;		// X- and Y-offsets for gump operations
0: decl global #0
1: struct
2: :=
3: #
GFref.+x := 0;
4: global #0
5: "x"
6: .+
7: 0L
8: := #
GFref.+y := 0;
9: global #0
10: "y"
11: .+
12: 0L
13: := #
var GFlayout := array();// Main layout array for entire gump
14: decl global #1
15: array
16: :=
17: #
var GFdata := array();	// Storage array for static-text and
18: decl global #2
19: array
20: :=
21: #
var GFdtidx;		// ...text in GFdata (index)
22: decl global #3
23: #
var GFtxtid;		// ...TeXT-entry returns (keyid)
24: decl global #4
25: #
var GFbutid;		// ...'action' BUTtons (keyid)
26: decl global #5
27: #
var GFcbxid;		// ...CheckBoXes (keyid)
28: decl global #6
29: #
var GFradid;		// ...RADio buttons (keyid)
30: decl global #7
31: #
XGFReset();
32: makelocal
33: jmp userfunc @654
34: #
var aGFTlength := struct;
35: decl global #8
36: struct
37: :=
38: #
aGFTlength.+charsf:=   // Space as Filler is not allowed
39: global #8
40: "charsf"
41: .+
42: "||||||||||||||`',.;:::::::::!!!!!!!!!!!!!!il1[]]]]]]]]]"bcejotî(){}===adfpqrszIÑ~~~~ghnuvyÅ <>----xJ578$?+++++++kCE2369^/*****mwABDFOPéô40%%GLNQSZ@#######HRT&__________KöUYYYYYYYYYYYXXXXXXXXXXXXXXVVVVVVVVVVVVVVMMMMMMMMMMMMMMWWWWWWWWWWWWWW"
43: := #
aGFTlength.+width:= array
44: global #8
45: "width"
46: .+
47: array
48: 2L
49: +=
50: 3L
51: +=
52: 4L
53: +=
54: 5L
55: +=
56: 6L
57: +=
58: 7L
59: +=
60: 8L
61: +=
62: 9L
63: +=
64: 10L
65: +=
66: 11L
67: +=
68: 12L
69: +=
70: 13L
71: +=
72: 14L
73: +=
74: 15L
75: +=
76: 16L
77: +=
78: 18L
79: +=
80: 21L
81: +=
82: := #
C:\pol2\pkg\foundations\gumps\examples\radioGroup.src, Line 22
program textcmd_radiogroup( who )
83: get arg 'who'
var f := 0x138a;
84: decl local #1
85: 5002L
86: :=
87: #
var n := 0x138b;
88: decl local #2
89: 5003L
90: :=
91: #
var loop, state;
92: decl local #3
93: #
94: decl local #4
95: #
var radgrp1 := { };
96: decl local #5
97: array
98: :=
99: #
var radgrp2 := { };
100: decl local #6
101: array
102: :=
103: #
GFInitGump( 100, 100 );
104: 100L
105: 100L
106: makelocal
107: jmp userfunc @352
108: #
GFNoClose();
109: makelocal
110: jmp userfunc @371
111: #
GFResizePic( 0, 0, 0x13EC, 95, 120 ); // Grey marble
112: 0L
113: 0L
114: 5100L
115: 95L
116: 120L
117: makelocal
118: jmp userfunc @501
119: #
state := 1;
120: 1L
121: local4 := 
GFSetRefRel( 20, 0 );
122: 20L
123: 0L
124: makelocal
125: jmp userfunc @597
126: #
GFSetRadioGroup( 1 );
127: 1L
128: makelocal
129: jmp userfunc @563
130: #
for( loop := 20 ; loop < 61 ; loop := loop + 20 )
131: local #3
132: 20L
133: :=
134: #
135: local #3
136: 61L
137: <
138: if false goto 165
var radret := GFRadioButton( 0, loop, f, n, state );
139: decl local #0
140: 0L
141: local #3
142: local #1
143: local #2
144: local #4
145: 0L
146: makelocal
147: jmp userfunc @411
148: :=
149: #
radgrp1.append( radret.keyid );
150: local #5
151: local #7
152: get member 'keyid'
153: Call Method append (1 params)
154: #
state := 0;
155: 0L
156: local4 := 
157: leave block(1)
158: local #3
159: local #3
160: 20L
161: +
162: :=
163: #
164: goto135
state := 1;
165: 1L
166: local4 := 
GFSetRefRel( 40, 0 );
167: 40L
168: 0L
169: makelocal
170: jmp userfunc @597
171: #
GFSetRadioGroup( 2 );
172: 2L
173: makelocal
174: jmp userfunc @563
175: #
for( loop := 20 ; loop < 61 ; loop := loop + 20 )
176: local #3
177: 20L
178: :=
179: #
180: local #3
181: 61L
182: <
183: if false goto 210
var radret := GFRadioButton( 0, loop, f, n, state );
184: decl local #0
185: 0L
186: local #3
187: local #1
188: local #2
189: local #4
190: 0L
191: makelocal
192: jmp userfunc @411
193: :=
194: #
radgrp2.append( radret.keyid );
195: local #6
196: local #7
197: get member 'keyid'
198: Call Method append (1 params)
199: #
state := 0;
200: 0L
201: local4 := 
202: leave block(1)
203: local #3
204: local #3
205: 20L
206: +
207: :=
208: #
209: goto180
GFSetRefRel( -35, 85 );
210: -35L
211: 85L
212: makelocal
213: jmp userfunc @597
214: #
GFButtonID( 0, 0, 0x81c, 0x81b, 1 );
215: 0L
216: 0L
217: 2076L
218: 2075L
219: 1L
220: 0L
221: makelocal
222: jmp userfunc @268
223: #
var keys := GFSendGump( who );
224: decl local #7
225: local #0
226: makelocal
227: jmp userfunc @557
228: :=
229: #
foreach key in (keys.keys)
230: local #7
231: get member 'keys'
232: initforeach @264
if ( key in radgrp1 )
233: local #8
234: local #5
235: in
236: if false goto 249
SendSysMessage( who, "Group one: " + whichindex( radgrp1, key ) );
237: local #0
238: "Group one: "
239: local #5
240: local #8
241: makelocal
242: jmp userfunc @619
243: +
244: 3L
245: 1000L
246: Func(2,1): SendSysMessage
247: #
248: goto264
elseif ( key in radgrp2 )
249: local #8
250: local #6
251: in
252: if false goto 264
SendSysMessage( who, "Group two: " + whichindex( radgrp2, key ) );
253: local #0
254: "Group two: "
255: local #6
256: local #8
257: makelocal
258: jmp userfunc @619
259: +
260: 3L
261: 1000L
262: Func(2,1): SendSysMessage
263: #
264: stepforeach @233
265: leave block(3)
266: leave block(8)
267: progend
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 543
function GFButtonID( x, y, release, press, close, id := 0 )
268: pop param 'id'
269: pop param 'close'
270: pop param 'press'
271: pop param 'release'
272: pop param 'y'
273: pop param 'x'
var line := "button " + CStr(GFref.x + CInt(x)) + " " + CStr(GFref.y + CInt(y))
274: decl local #6
275: "button "
276: global #0
277: get member 'x'
278: local #5
279: Func(0,0): CInt
280: +
281: Func(0,1): CStr
282: +
283: " "
284: +
285: global #0
286: get member 'y'
287: local #4
288: Func(0,0): CInt
289: +
290: Func(0,1): CStr
291: +
292: :=
293: #
line := line + " " + CStr(CInt(release)) + " " + CStr(CInt(press)) + " ";
294: local #6
295: " "
296: +
297: local #3
298: Func(0,0): CInt
299: Func(0,1): CStr
300: +
301: " "
302: +
303: local #2
304: Func(0,0): CInt
305: Func(0,1): CStr
306: +
307: " "
308: +
309: local6 := 
if ( close == 0 )
310: local #1
311: 0L
312: ==
313: if false goto 319
line := line + "0 0 ";
314: local #6
315: "0 0 "
316: +
317: local6 := 
318: goto323
line := line + "1 0 ";
319: local #6
320: "1 0 "
321: +
322: local6 := 
id := CInt(id);		// Ensure it's an integer
323: local #0
324: Func(0,0): CInt
325: local0 := 
if ( id < 1 )		// Catch errors (0) and invalid (negative) values
326: local #0
327: 1L
328: <
329: if false goto 336
id := GFbutid;
330: global #5
331: local0 := 
GFbutid := GFbutid + 1;		// Update KeyID (butid) (only if used)
332: global #5
333: 1L
334: +
335: global5 := 
line := line + CStr(id);
336: local #6
337: local #0
338: Func(0,1): CStr
339: +
340: local6 := 
GFlayout.append( line );
341: global #1
342: local #6
343: Call Method append (1 params)
344: #
return XGFRetVal( GFlayout.size(), -1, id );
345: global #1
346: Call Method size (0 params)
347: -1L
348: local #0
349: makelocal
350: jmp userfunc @670
351: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 279
function GFInitGump( sx := 0, sy := 0 )
352: pop param 'sy'
353: pop param 'sx'
XGFReset();
354: makelocal
355: jmp userfunc @654
356: #
GFSetRef( sx, sy );
357: local #1
358: local #0
359: makelocal
360: jmp userfunc @581
361: #
GFPage( 0 );
362: 0L
363: makelocal
364: jmp userfunc @393
365: #
GFNoDispose();
366: makelocal
367: jmp userfunc @382
368: #
369: 0L
370: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 304
function GFNoClose()
GFlayout.append( "noclose" );
371: global #1
372: "noclose"
373: Call Method append (1 params)
374: #
return XGFRetVal( GFlayout.size() );
375: global #1
376: Call Method size (0 params)
377: -1L
378: -1L
379: makelocal
380: jmp userfunc @670
381: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 314
function GFNoDispose()
GFlayout.append( "nodispose" );
382: global #1
383: "nodispose"
384: Call Method append (1 params)
385: #
return XGFRetVal( GFlayout.size() );
386: global #1
387: Call Method size (0 params)
388: -1L
389: -1L
390: makelocal
391: jmp userfunc @670
392: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 292
function GFPage( page )
393: pop param 'page'
page := CInt(page);
394: local #0
395: Func(0,0): CInt
396: local0 := 
GFlayout.append( "page " + CStr(page) );
397: global #1
398: "page "
399: local #0
400: Func(0,1): CStr
401: +
402: Call Method append (1 params)
403: #
return XGFRetVal( GFlayout.size(), -1, page );
404: global #1
405: Call Method size (0 params)
406: -1L
407: local #0
408: makelocal
409: jmp userfunc @670
410: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 597
function GFRadioButton( x, y, off, on, state, id := 0)
411: pop param 'id'
412: pop param 'state'
413: pop param 'on'
414: pop param 'off'
415: pop param 'y'
416: pop param 'x'
if (state == error)
417: local #1
418: error
419: ==
420: if false goto 423
state := 0;
421: 0L
422: local1 := 
var line := "radio " + CStr(GFref.x + CInt(x)) + " " + CStr(GFref.y + CInt(y));
423: decl local #6
424: "radio "
425: global #0
426: get member 'x'
427: local #5
428: Func(0,0): CInt
429: +
430: Func(0,1): CStr
431: +
432: " "
433: +
434: global #0
435: get member 'y'
436: local #4
437: Func(0,0): CInt
438: +
439: Func(0,1): CStr
440: +
441: :=
442: #
line := line + " " + CStr(CInt(off)) + " " + CStr(CInt(on)) + " ";
443: local #6
444: " "
445: +
446: local #3
447: Func(0,0): CInt
448: Func(0,1): CStr
449: +
450: " "
451: +
452: local #2
453: Func(0,0): CInt
454: Func(0,1): CStr
455: +
456: " "
457: +
458: local6 := 
if ( state == 0 )
459: local #1
460: 0L
461: ==
462: if false goto 468
line := line + "0 ";
463: local #6
464: "0 "
465: +
466: local6 := 
467: goto472
line := line + "1 ";
468: local #6
469: "1 "
470: +
471: local6 := 
id := CInt(id);
472: local #0
473: Func(0,0): CInt
474: local0 := 
if (id < 1)
475: local #0
476: 1L
477: <
478: if false goto 485
id := GFradid;
479: global #7
480: local0 := 
GFradid := GFradid + 1;
481: global #7
482: 1L
483: +
484: global7 := 
line := line + CStr(id);
485: local #6
486: local #0
487: Func(0,1): CStr
488: +
489: local6 := 
GFlayout.append( line );
490: global #1
491: local #6
492: Call Method append (1 params)
493: #
return XGFRetVal( GFlayout.size(), -1, id );
494: global #1
495: Call Method size (0 params)
496: -1L
497: local #0
498: makelocal
499: jmp userfunc @670
500: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 370
function GFResizePic( x, y, gumpid, w, h )
501: pop param 'h'
502: pop param 'w'
503: pop param 'gumpid'
504: pop param 'y'
505: pop param 'x'
var line := "resizepic " + CStr(GFref.x + CInt(x)) + " " + CStr(GFref.y + CInt(
506: decl local #5
507: "resizepic "
508: global #0
509: get member 'x'
510: local #4
511: Func(0,0): CInt
512: +
513: Func(0,1): CStr
514: +
515: " "
516: +
517: global #0
518: get member 'y'
519: local #3
520: Func(0,0): CInt
521: +
522: Func(0,1): CStr
523: +
524: :=
525: #
line := line + " " + CStr(CInt(gumpid)) + " " + CStr(CInt(w)) + " " + CStr(CInt
526: local #5
527: " "
528: +
529: local #2
530: Func(0,0): CInt
531: Func(0,1): CStr
532: +
533: " "
534: +
535: local #1
536: Func(0,0): CInt
537: Func(0,1): CStr
538: +
539: " "
540: +
541: local #0
542: Func(0,0): CInt
543: Func(0,1): CStr
544: +
545: local5 := 
GFlayout.append( line );
546: global #1
547: local #5
548: Call Method append (1 params)
549: #
return XGFRetVal( GFlayout.size() );
550: global #1
551: Call Method size (0 params)
552: -1L
553: -1L
554: makelocal
555: jmp userfunc @670
556: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 808
function GFSendGump( who )
557: pop param 'who'
return SendDialogGump( who, GFlayout, GFdata );
558: local #0
559: global #1
560: global #2
561: Func(2,0): SendDialogGump
562: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 625
function GFSetRadioGroup( group )
563: pop param 'group'
group := CInt(group);
564: local #0
565: Func(0,0): CInt
566: local0 := 
GFlayout.append( "group " + CStr(group) );
567: global #1
568: "group "
569: local #0
570: Func(0,1): CStr
571: +
572: Call Method append (1 params)
573: #
return XGFRetVal( GFlayout.size(), -1, group );
574: global #1
575: Call Method size (0 params)
576: -1L
577: local #0
578: makelocal
579: jmp userfunc @670
580: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 259
function GFSetRef( x := 0, y := 0 )
581: pop param 'y'
582: pop param 'x'
var oldref := GFref;
583: decl local #2
584: global #0
585: :=
586: #
GFref.x := CInt(x);
587: global #0
588: local #1
589: Func(0,0): CInt
590: set member 'x' #
GFref.y := CInt(y);
591: global #0
592: local #0
593: Func(0,0): CInt
594: set member 'y' #
return oldref;
595: local #2
596: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 270
function GFSetRefRel( dx, dy )
597: pop param 'dy'
598: pop param 'dx'
var oldref := GFref;
599: decl local #2
600: global #0
601: :=
602: #
GFref.x := GFref.x + CInt(dx);
603: global #0
604: global #0
605: get member 'x'
606: local #1
607: Func(0,0): CInt
608: +
609: set member 'x' #
GFref.y := GFref.y + CInt(dy);
610: global #0
611: global #0
612: get member 'y'
613: local #0
614: Func(0,0): CInt
615: +
616: set member 'y' #
return oldref;
617: local #2
618: return
C:\pol2\pkg\foundations\gumps\examples\radioGroup.src, Line 70
function whichindex( arr, value )
619: pop param 'value'
620: pop param 'arr'
var index := 1;
621: decl local #2
622: 1L
623: :=
624: #
if ( arr.size() == 0 || !(value in arr) )
625: local #1
626: Call Method size (0 params)
627: 0L
628: ==
629: local #0
630: local #1
631: in
632: !
633: ||
634: if false goto 637
return 0;
635: 0L
636: return
foreach member in arr
637: local #1
638: initforeach @650
if ( member == value )
639: local #3
640: local #0
641: ==
642: if false goto 646
return index;
643: local #2
644: return
645: goto650
index := index + 1;
646: local #2
647: 1L
648: +
649: local2 := 
650: stepforeach @639
651: leave block(3)
return 0;
652: 0L
653: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 835
function XGFReset( )
GFlayout := array();
654: array
655: global1 := 
GFdata := array();
656: array
657: global2 := 
GFdtidx := GFINIT_TEXT;
658: 0L
659: global3 := 
GFtxtid := GFINIT_TEXTENTRY;
660: 513L
661: global4 := 
GFbutid := GFINIT_BUTTON;
662: 1025L
663: global5 := 
GFcbxid := GFINIT_CHECKBOX;
664: 1537L
665: global6 := 
GFradid := GFINIT_RADIO;
666: 2049L
667: global7 := 
668: 0L
669: return
C:\pol2\pkg\foundations\gumps\examples\../gumps.inc, Line 851
function XGFRetVal( lytidx := -1, dtidx := -1, keyid := -1 )
670: pop param 'keyid'
671: pop param 'dtidx'
672: pop param 'lytidx'
var rvsl := struct;
673: decl local #3
674: struct
675: :=
676: #
if ( lytidx > -1 )
677: local #2
678: -1L
679: >
680: if false goto 686
rvsl.+lytidx := lytidx;
681: local #3
682: "lytidx"
683: .+
684: local #2
685: := #
if ( dtidx > -1 )
686: local #1
687: -1L
688: >
689: if false goto 695
rvsl.+dtidx := dtidx;
690: local #3
691: "dtidx"
692: .+
693: local #1
694: := #
if ( keyid > -1 )
695: local #0
696: -1L
697: >
698: if false goto 704
rvsl.+keyid := keyid;
699: local #3
700: "keyid"
701: .+
702: local #0
703: := #
sleepms(2);	// Will hopefully stop runaway script problem :/
704: 2L
705: Func(3,0): sleepms
706: #
return rvsl;
707: local #3
708: return
